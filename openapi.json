{
    "openapi": "3.0.0",
    "info": {
        "title": "Fulfillment API",
        "description": "\nAll data is transferred in UTF-8 encoding.\\\nThe API uses stateless HTTP. No cookies have to be kept.\\\nAuthentication via OAuth2 client credentials flow.",
        "version": "2.0.0"
    },
    "servers": [
        {
            "url": "https://fulfillment-api.conqore.niceshops.com/v2",
            "description": "Production server"
        },
        {
            "url": "https://fulfillment-api.staging.backbone.datenkraft.info/v2",
            "description": "Staging server"
        },
        {
            "url": "https://localhost:30410/v2",
            "description": "Development server"
        }
    ],
    "paths": {
        "/auth/role": {
            "get": {
                "tags": [
                    "auth-role"
                ],
                "summary": "Get all available roles from this resource server",
                "description": "Get all available roles from this resource server",
                "operationId": "getAuthRoleCollection",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/role-identity": {
            "get": {
                "tags": [
                    "auth-role-identity"
                ],
                "summary": "Get all role to identity assignments from this resource server",
                "description": "Get all role to identity assignments from this resource server",
                "operationId": "getAuthRoleIdentityCollection",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleIdentityCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth-role-identity"
                ],
                "summary": "Create one or more role to identity assignments in this resource server",
                "description": "Create one or more role to identity assignments in this resource server",
                "operationId": "postAuthRoleIdentityCollection",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/authRoleIdentityCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleIdentityCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "auth-role-identity"
                ],
                "summary": "Delete one or more role to identity assignments in this resource server",
                "description": "Delete one or more role to identity assignments in this resource server",
                "operationId": "deleteAuthRoleIdentityCollection",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/authRoleIdentityCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/docs": {
            "get": {
                "tags": [
                    "docs"
                ],
                "summary": "Get the openapi documentation as json",
                "description": "Get the openapi documentation as json",
                "operationId": "getOpenApi",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/docs/openapi.{format}": {
            "get": {
                "tags": [
                    "docs"
                ],
                "summary": "Get the openapi documentation in the specified format (yaml or json, fallback is json)",
                "description": "Get the openapi documentation in the specified format (yaml or json, fallback is json)",
                "operationId": "getOpenApiInFormat",
                "parameters": [
                    {
                        "name": "format",
                        "in": "path",
                        "description": "Openapi file format",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "yaml",
                                "json"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/inbound-delivery/{inboundDeliveryNumber}": {
            "get": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Get an inbound delivery by inbound delivery number.",
                "description": "Get an inbound delivery by inbound delivery number.",
                "operationId": "GET::/inbound-delivery/{inboundDeliveryNumber}::App\\Http\\Controllers\\V2\\InboundDeliveryController::getInboundDelivery",
                "parameters": [
                    {
                        "name": "inboundDeliveryNumber",
                        "in": "path",
                        "description": "The inbound delivery number as defined during the creation of the order.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used in DISCO (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inboundDelivery"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Add a new inbound delivery.",
                "description": "Add a new inbound delivery referenced by the given deliveryNumber.",
                "operationId": "postInboundDelivery",
                "parameters": [
                    {
                        "name": "inboundDeliveryNumber",
                        "in": "path",
                        "description": "The number the inbound delivery should be refered by. This number is user defined, must be unique and has a maximum length (check maxLength field).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used in DISCO (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/newInboundDelivery"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inboundDelivery"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            }
        },
        "/delivery/{deliveryNumber}": {
            "get": {
                "tags": [
                    "delivery"
                ],
                "summary": "Get the delivery with the given deliveryNumber.",
                "description": "Get the delivery with the given deliveryNumber.",
                "operationId": "getDelivery",
                "parameters": [
                    {
                        "name": "deliveryNumber",
                        "in": "path",
                        "description": "delivery number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used in DISCO (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/delivery"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            }
        },
        "/delivery": {
            "get": {
                "tags": [
                    "delivery"
                ],
                "summary": "Get deliveries filtered by orderNumber.",
                "description": "Get deliveries filtered by orderNumber.",
                "operationId": "getDeliveryCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "filter[orderNumber]",
                        "in": "query",
                        "description": "A filter with the orderNumber as given during the creation of the order.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 59
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used in DISCO (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deliveryCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            }
        },
        "/supplier": {
            "get": {
                "tags": [
                    "supplier"
                ],
                "summary": "Get suppliers filtered by shopCode.",
                "description": "Get suppliers filtered by shopCode.",
                "operationId": "getSupplierCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used in DISCO (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/supplierCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            }
        },
        "/order/{orderNumber}": {
            "get": {
                "tags": [
                    "order"
                ],
                "summary": "Get an order by order number.",
                "description": "Get an order by order number.",
                "operationId": "getOrder",
                "parameters": [
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "The order number as defined during the creation of the order.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 59
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used in DISCO (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "order"
                ],
                "summary": "Add a new order.",
                "description": "Add a new order referenced by the given orderNumber.",
                "operationId": "postOrder",
                "parameters": [
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "The number the order should be refered by. This number is user defined, must be unique and has a maximum length (check maxLength field).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 59
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/newOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            }
        },
        "/order/{orderNumber}/cancel": {
            "post": {
                "tags": [
                    "order"
                ],
                "summary": "Cancel an order.",
                "description": "Cancel the order specified by the given order number (set in param orderNumber).",
                "operationId": "cancelOrder",
                "parameters": [
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "The number the order is refered by.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 59
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used in DISCO (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict\n\nAvailable message codes:\n- ORDER_NOT_CANCELABLE: The order could not be canceled anymore\n- ORDER_ALREADY_CANCELED: The order is already canceled\n- ORDER_CANCELLATION_ALREADY_EXISTS: An order cancellation request already exists, which needs manual approval",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            }
        },
        "/stock": {
            "get": {
                "tags": [
                    "stock"
                ],
                "summary": "Get the stock for all products or for a specific product.",
                "description": "Get the stock for all products or for a specific product.",
                "operationId": "getStockCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "filter[productNumber]",
                        "in": "query",
                        "description": "product number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used in DISCO (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/stockCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            }
        },
        "/shop": {
            "get": {
                "tags": [
                    "shop"
                ],
                "summary": "Get a list of shops.",
                "description": "Get a list of shops.",
                "operationId": "getShopCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "filter[meta][shopifyShopDomain]",
                        "in": "query",
                        "description": "A filter for the Shopify hostname of the shop.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shopCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "errorResponse": {
                "properties": {
                    "errors": {
                        "description": "errors",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/error"
                        }
                    }
                },
                "type": "object"
            },
            "error": {
                "required": [
                    "code",
                    "message"
                ],
                "properties": {
                    "code": {
                        "description": "Code",
                        "type": "string"
                    },
                    "message": {
                        "description": "Message",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "getAuthPermissionCollectionResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/authPermissionResource"
                }
            },
            "authPermissionResource": {
                "required": [
                    "permissionCode",
                    "name"
                ],
                "properties": {
                    "permissionCode": {
                        "description": "Permission Code",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "authRoleCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/authRoleResource"
                }
            },
            "authRoleResource": {
                "required": [
                    "roleCode",
                    "name"
                ],
                "properties": {
                    "roleCode": {
                        "description": "Role Code",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "authRoleIdentityCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/authRoleIdentityResource"
                }
            },
            "authRoleIdentityResource": {
                "required": [
                    "roleCode",
                    "identityId"
                ],
                "properties": {
                    "roleCode": {
                        "description": "Role Code",
                        "type": "string"
                    },
                    "identityId": {
                        "description": "Identity ID",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "baseOrder": {
                "title": "baseOrder",
                "description": "Data to represent an order",
                "required": [
                    "customer",
                    "orderItems",
                    "payment"
                ],
                "properties": {
                    "shopCode": {
                        "description": "The shopCode used in DISCO.",
                        "type": "string",
                        "nullable": true
                    },
                    "customer": {
                        "$ref": "#/components/schemas/baseOrderCustomer"
                    },
                    "orderItems": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/orderItem"
                        }
                    },
                    "payment": {
                        "$ref": "#/components/schemas/orderPayment"
                    },
                    "shipping": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/orderShipping"
                            }
                        ]
                    },
                    "options": {
                        "description": "Additional options (optional, TBD)",
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "newOrder": {
                "title": "newOrder",
                "description": "Data to create a new order",
                "required": [
                    "customer",
                    "orderItems",
                    "payment"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrder"
                    },
                    {
                        "properties": {
                            "customer": {
                                "$ref": "#/components/schemas/newOrderCustomer"
                            },
                            "orderItems": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/newOrderItem"
                                },
                                "maxItems": 1000
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "order": {
                "title": "order",
                "description": "Data to represent an order",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrder"
                    },
                    {
                        "properties": {
                            "orderItems": {
                                "description": "Note: canceled orderItems are NOT included.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/orderItem"
                                }
                            },
                            "customer": {
                                "$ref": "#/components/schemas/orderCustomer"
                            },
                            "status": {
                                "description": "The current status of the order.\n- new: The order was created but not every required information was given. The order can not be processed without manual intervention.\n- processing: The order is being processed. For split deliveries, some of the shipments might have already been transferred to the delivery agent.\n- delivered: The orders shipments have all been transferred to the delivery agent.\n- deleted: The order has been cancelled.\n- locked: The order is locked. The order can not be processed without manual intervention.\n- examination: The order has been manually locked.  The order can not be processed without manual intervention.\n",
                                "type": "string",
                                "enum": [
                                    "new",
                                    "processing",
                                    "delivered",
                                    "deleted",
                                    "locked",
                                    "examination"
                                ]
                            },
                            "orderDate": {
                                "description": "The create date for the order. Default is the current date. Format in ISO 8601",
                                "type": "string",
                                "format": "date-time",
                                "example": "2020-04-24T12:27:00+02:00"
                            },
                            "delivery": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/orderDelivery"
                                },
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderItem": {
                "title": "orderItem",
                "required": [
                    "productNumber",
                    "count"
                ],
                "properties": {
                    "productNumber": {
                        "description": "",
                        "type": "string"
                    },
                    "title": {
                        "description": "Item title (optional)",
                        "type": "string",
                        "nullable": true
                    },
                    "count": {
                        "description": "Positive number of items to order",
                        "type": "integer",
                        "format": "int32"
                    },
                    "price": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/orderItemPrice"
                            }
                        ]
                    },
                    "options": {
                        "description": "Additional options (optional, TBD)",
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "newOrderItem": {
                "title": "newOrderItem",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/orderItem"
                    }
                ]
            },
            "orderItemPrice": {
                "title": "orderItemPrice",
                "required": [
                    "value",
                    "type",
                    "vat",
                    "currencyCode"
                ],
                "properties": {
                    "value": {
                        "description": "The price value rounded to 2 decimals, dot as separator",
                        "type": "number",
                        "format": "float",
                        "example": "10.99"
                    },
                    "type": {
                        "description": "The price type",
                        "type": "string",
                        "enum": [
                            "net",
                            "gross"
                        ],
                        "example": "gross"
                    },
                    "vat": {
                        "description": "The VAT in percent",
                        "type": "number",
                        "format": "float",
                        "example": "20"
                    },
                    "currencyCode": {
                        "description": "The currency code (ISO 4217)",
                        "type": "string",
                        "example": "EUR"
                    }
                },
                "type": "object"
            },
            "baseOrderCustomer": {
                "title": "baseOrderCustomer",
                "required": [
                    "gender",
                    "languageCode",
                    "deliveryAddress"
                ],
                "properties": {
                    "gender": {
                        "description": "",
                        "type": "string",
                        "enum": [
                            "male",
                            "female",
                            "unknown"
                        ]
                    },
                    "languageCode": {
                        "description": "The language code for any customer communications (ISO 639-1)",
                        "type": "string"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/orderCustomerDeliveryAddress"
                    }
                },
                "type": "object"
            },
            "newOrderCustomer": {
                "title": "newOrderCustomer",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrderCustomer"
                    }
                ]
            },
            "orderCustomer": {
                "title": "orderCustomer",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrderCustomer"
                    },
                    {
                        "properties": {
                            "number": {
                                "description": "Customer number if an existing account should be used for the order",
                                "type": "string",
                                "nullable": true
                            },
                            "type": {
                                "description": "The customer type",
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderCustomerAddress": {
                "title": "orderCustomerAddress",
                "required": [
                    "street",
                    "streetNumber",
                    "zipCode",
                    "city",
                    "countryCode"
                ],
                "properties": {
                    "street": {
                        "description": "",
                        "type": "string"
                    },
                    "streetNumber": {
                        "description": "",
                        "type": "string"
                    },
                    "zipCode": {
                        "description": "",
                        "type": "string"
                    },
                    "district": {
                        "description": "",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "",
                        "type": "string"
                    },
                    "provinceCode": {
                        "description": "Province code (ISO 3166-2)",
                        "type": "string",
                        "nullable": true
                    },
                    "countryCode": {
                        "description": "Country code (ISO 3166-1 alpha-2)",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "orderCustomerDeliveryAddress": {
                "title": "orderCustomerDeliveryAddress",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/orderCustomerAddress"
                    },
                    {
                        "required": [
                            "nameLine1"
                        ],
                        "properties": {
                            "nameLine1": {
                                "description": "",
                                "type": "string"
                            },
                            "nameLine2": {
                                "description": "",
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderCustomerInvoiceAddress": {
                "title": "orderCustomerInvoiceAddress",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/orderCustomerAddress"
                    }
                ]
            },
            "orderPayment": {
                "title": "orderPayment",
                "description": "Options regarding the payment of the order",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The payment method",
                        "type": "string",
                        "enum": [
                            "invoice"
                        ]
                    }
                },
                "type": "object"
            },
            "orderShipping": {
                "title": "orderShipping",
                "description": "Options regarding the shipping of the order",
                "required": [
                    "deliveryService"
                ],
                "properties": {
                    "deliveryService": {
                        "description": "The delivery service to recommend for usage.",
                        "type": "string",
                        "enum": [
                            "post_at",
                            "dhl",
                            "dachser"
                        ]
                    }
                },
                "type": "object"
            },
            "orderDelivery": {
                "title": "orderDelivery",
                "description": "The delivery for the order. Details can be read by GET /delivery/.",
                "properties": {
                    "number": {
                        "description": "",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status code of the delivery",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "deliveryCollection": {
                "title": "deliveryCollection",
                "description": "A collection of deliveries",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/delivery"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "delivery": {
                "description": "A delivery of the order",
                "properties": {
                    "number": {
                        "description": "Number",
                        "type": "string"
                    },
                    "orderNumber": {
                        "description": "The order number. Note: This can be null if the delivery has no associated order.",
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "description": "Status of the delivery.\n- in_progress: The delivery is in the process of being packaged.\n- delivered: The delivery has been transferred to the delivery agent.",
                        "type": "string",
                        "enum": [
                            "in_progress",
                            "delivered"
                        ]
                    },
                    "shipments": {
                        "description": "List of shipments (= package, parcel, pallet, ...)",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/shipment"
                        }
                    }
                },
                "type": "object"
            },
            "shipment": {
                "description": "A shipments defines a single delivered entity (package, parcel, pallet, ...)",
                "properties": {
                    "number": {
                        "description": "The delivery number",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the delivery.\n- in_progress: The delivery is in the process of being packaged.\n- delivered: The delivery has been transferred to the delivery agent.",
                        "type": "string",
                        "enum": [
                            "post_at",
                            "dhl",
                            "dachser"
                        ]
                    },
                    "deliveryService": {
                        "description": "The delivery service used to send this delivery",
                        "type": "string",
                        "enum": [
                            "in_progress",
                            "delivered"
                        ],
                        "nullable": true
                    },
                    "code": {
                        "description": "Carrier specific tracking code",
                        "type": "string"
                    },
                    "link": {
                        "description": "Link to the carrier's tracking site",
                        "type": "string"
                    },
                    "weight": {
                        "description": "Weight",
                        "type": "number",
                        "format": "float"
                    },
                    "weightUnit": {
                        "description": "Weight unit",
                        "type": "string"
                    },
                    "shipmentLines": {
                        "description": "Shipment lines",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/shipmentLine"
                        }
                    }
                },
                "type": "object"
            },
            "shipmentLine": {
                "description": "One piece of content in a shipment",
                "properties": {
                    "productNumber": {
                        "description": "product number",
                        "type": "string"
                    },
                    "count": {
                        "description": "Number of items contained in the delivery",
                        "type": "integer",
                        "format": "int32"
                    },
                    "unit": {
                        "description": "product unit",
                        "type": "string",
                        "nullable": true
                    },
                    "serialNumbers": {
                        "description": "serial numbers",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "nullable": true
            },
            "supplierCollection": {
                "title": "supplierCollection",
                "description": "A collection of suppliers",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/supplier"
                                }
                            }
                        },
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/collectionPagination"
                    }
                ]
            },
            "supplier": {
                "title": "supplier",
                "description": "Data to represent a supplier",
                "required": [
                    "supplierNumber",
                    "name"
                ],
                "properties": {
                    "supplierNumber": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "Supplier name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "shop": {
                "description": "Data to represent a shop",
                "properties": {
                    "id": {
                        "description": "Id",
                        "type": "string"
                    },
                    "discoShopCode": {
                        "description": "The shopCode used in DISCO.",
                        "type": "string"
                    },
                    "discoReferencePrefix": {
                        "description": "The prefix to the references in DISCO.",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email used in DISCO.",
                        "type": "string"
                    },
                    "meta": {
                        "description": "Meta data of the shop.",
                        "properties": {
                            "shopifyShopDomain": {
                                "description": "Domain of the Shopify shop.",
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "type": "object",
                        "nullable": true,
                        "additionalProperties": true
                    }
                },
                "type": "object"
            },
            "shopCollection": {
                "title": "shopCollection",
                "description": "A collection of shops",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/shop"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "newInboundDelivery": {
                "title": "newInboundDelivery",
                "description": "Data to create a new inbound delivery",
                "required": [
                    "supplierNumber",
                    "expectedDeliveryDate",
                    "products"
                ],
                "properties": {
                    "supplierNumber": {
                        "description": "Number of the supplier",
                        "type": "string"
                    },
                    "expectedDeliveryDate": {
                        "description": "Expected date of the delivery",
                        "type": "string",
                        "format": "date"
                    },
                    "products": {
                        "description": "Products in the inbound delivery",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/inboundDeliveryProduct"
                        }
                    }
                },
                "type": "object"
            },
            "inboundDelivery": {
                "title": "inboundDelivery",
                "description": "Data to represent an inbound delivery",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/newInboundDelivery"
                    },
                    {
                        "properties": {
                            "inboundDeliveryNumber": {
                                "description": "",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "inboundDeliveryProduct": {
                "title": "inboundDeliveryProduct",
                "description": "Class InboundDeliveryResource",
                "required": [
                    "productNumber",
                    "count"
                ],
                "properties": {
                    "productNumber": {
                        "description": "Product number",
                        "type": "string"
                    },
                    "count": {
                        "description": "Number of products in the inbound delivery",
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "stockCollection": {
                "title": "stockCollection",
                "description": "A collection of stocks",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/stock"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "stock": {
                "description": "Class StockResource",
                "properties": {
                    "productNumber": {
                        "description": "The product number the stock is available for",
                        "type": "string"
                    },
                    "stock": {
                        "description": "The available stock",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "collection": {
                "title": "collection",
                "properties": {
                    "pagination": {
                        "$ref": "#/components/schemas/collectionPagination"
                    },
                    "data": {
                        "description": "",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "collectionPagination": {
                "title": "collectionPagination",
                "description": "Class AbstractPaginatedResourceCollection",
                "properties": {
                    "page": {
                        "description": "The page contained in this collection.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageSize": {
                        "description": "The page size used for reading the collection.",
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "oAuthAuthorization": {
                "type": "oauth2",
                "description": "OAuth2 Authorization",
                "flows": {
                    "clientCredentials": {
                        "tokenUrl": "https://authentication-api.conqore.niceshops.com/oauth/token",
                        "refreshUrl": "UNDEFINED",
                        "scopes": {}
                    }
                }
            }
        }
    }
}