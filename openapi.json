{
  "openapi": "3.0.0",
  "info": {
    "title": "Fulfillment API",
    "description": "\nAll data is transferred in UTF-8 encoding.\\\nThe API uses stateless HTTP. No cookies have to be kept.\\\nAuthentication via OAuth2 client credentials flow.",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://fulfillment-api.conqore.niceshops.com/v2",
      "description": "Production server"
    },
    {
      "url": "https://fulfillment-api.staging.backbone.datenkraft.info/v2",
      "description": "Staging server"
    },
    {
      "url": "https://localhost:30410/v2",
      "description": "Development server"
    }
  ],
  "paths": {
    "/delivery-service": {
      "get": {
        "tags": [
          "delivery-service"
        ],
        "summary": "Get delivery services.",
        "description": "Get delivery services.",
        "operationId": "getDeliveryServiceCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deliveryServiceCollection"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/shop": {
      "get": {
        "tags": [
          "shop"
        ],
        "summary": "Get a list of shops.",
        "description": "Get a list of shops.",
        "operationId": "getShopCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[meta][shopifyShopDomain]",
            "in": "query",
            "description": "A filter for the Shopify hostname of the shop.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shopCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/shop/{shopId}": {
      "patch": {
        "tags": [
          "shop"
        ],
        "summary": "Update a shop",
        "description": "Update one or more fields of a shop. Only a limited set of fields can be updated.",
        "operationId": "patchShop",
        "parameters": [
          {
            "name": "shopId",
            "in": "path",
            "description": "Shop Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateShop"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shop"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/inbound-delivery/{inboundDeliveryNumber}": {
      "get": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Get an inbound delivery by inbound delivery number.",
        "description": "Get an inbound delivery by inbound delivery number.",
        "operationId": "getInboundDelivery",
        "parameters": [
          {
            "name": "inboundDeliveryNumber",
            "in": "path",
            "description": "The inbound delivery number as defined during the creation of the order.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inboundDelivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Add a new inbound delivery.",
        "description": "Add a new inbound delivery referenced by the given deliveryNumber.",
        "operationId": "postInboundDelivery",
        "parameters": [
          {
            "name": "inboundDeliveryNumber",
            "in": "path",
            "description": "The number the inbound delivery should be refered by. This number is user defined, must be unique and has a maximum length (check maxLength field).",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newInboundDelivery"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inboundDelivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/inbound-delivery": {
      "get": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Get a list of inbound deliveries.",
        "description": "Get a list of inbound deliveries.",
        "operationId": "getInboundDeliveryCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Status of the inbound delivery (optional).\n\nThe status for not yet completed is subject to change. you may poll for changes.\n- open: The inbound delivery has not yet been delivered.\n- in_progress: The inbound delivery is being processed in our warehouse.\n- completed: The inbound delivery has been processed in our warehouse.\n- deleted: The inbound delivery has been deleted.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "single status": {
                "summary": "single inbound delivery status",
                "value": "in_progress"
              },
              "multiple status": {
                "summary": "multiple inbound delivery status",
                "value": "in_progress,open"
              }
            }
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inboundDeliveryCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/supplier": {
      "get": {
        "tags": [
          "supplier"
        ],
        "summary": "Get suppliers filtered by shopCode.",
        "description": "Get suppliers filtered by shopCode.",
        "operationId": "getSupplierCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 20.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplierCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/delivery/{deliveryNumber}": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "Get the delivery with the given deliveryNumber.",
        "description": "Get the delivery with the given deliveryNumber.",
        "operationId": "getDelivery",
        "parameters": [
          {
            "name": "deliveryNumber",
            "in": "path",
            "description": "delivery number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delivery"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/delivery": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "Get deliveries filtered by a single or multiple order numbers.",
        "description": "Get deliveries filtered by a single or multiple order numbers.",
        "operationId": "getDeliveryCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[orderNumber]",
            "in": "query",
            "description": "A filter for a single order number or multiple order numbers separted by a comma.\n- The filter can contain a maximum of 100 order numbers.\n- The order numbers in the filter must be unique.\n- A single order number can have a maximum length of 59 characters.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "single order number": {
                "summary": "single order number",
                "value": {
                  "filter[orderNumber]": "100123123"
                }
              },
              "multiple order numbers": {
                "summary": "multiple order numbers",
                "value": {
                  "filter[orderNumber]": "100123123,100123124"
                }
              }
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deliveryCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/order/{orderNumber}": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get an order by order number.",
        "description": "Get an order by order number.",
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "orderNumber",
            "in": "path",
            "description": "The order number as defined during the creation of the order.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 59
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Add a new order.",
        "description": "Add a new order referenced by the given orderNumber.",
        "operationId": "postOrder",
        "parameters": [
          {
            "name": "orderNumber",
            "in": "path",
            "description": "The number the order should be refered by. This number is user defined, must be unique and has a maximum length (check maxLength field).",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 59
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/order/{orderNumber}/cancel": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Cancel an order.",
        "description": "Cancel the order specified by the given order number (set in param orderNumber).",
        "operationId": "cancelOrder",
        "parameters": [
          {
            "name": "orderNumber",
            "in": "path",
            "description": "The number the order is refered by.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 59
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\n\nAvailable message codes:\n- ORDER_NOT_CANCELABLE: The order could not be canceled anymore\n- ORDER_ALREADY_CANCELED: The order is already canceled\n- ORDER_CANCELLATION_ALREADY_EXISTS: An order cancellation request already exists, which needs manual approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/stock": {
      "get": {
        "tags": [
          "stock"
        ],
        "summary": "Get the stock for all products or for a specific product.",
        "description": "Get the stock for all products or for a specific product.",
        "operationId": "getStockCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 20.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[productNumber]",
            "in": "query",
            "description": "product number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stockCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/report/clearing/orders": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Read the created orders for the given shopCode in the given dateRange.",
        "description": "Read the created orders for the given shopCode in the given dateRange.",
        "operationId": "getOrderReportClearingCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 20.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used in DISCO (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[dateFrom]",
            "in": "query",
            "description": "The start date (inclusive) in format Y-m-d for which orders should be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "filter[dateTo]",
            "in": "query",
            "description": "The end date (inclusive) in format Y-m-d for which orders should be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportClearingOrderCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/auth/role": {
      "get": {
        "tags": [
          "auth-role"
        ],
        "summary": "Get all available roles from this resource server",
        "description": "Get all available roles from this resource server",
        "operationId": "getAuthRoleCollection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authRoleCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/auth/role-identity": {
      "get": {
        "tags": [
          "auth-role-identity"
        ],
        "summary": "Get all role to identity assignments from this resource server",
        "description": "Get all role to identity assignments from this resource server",
        "operationId": "getAuthRoleIdentityCollection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authRoleIdentityCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "auth-role-identity"
        ],
        "summary": "Create one or more role to identity assignments in this resource server",
        "description": "Create one or more role to identity assignments in this resource server",
        "operationId": "postAuthRoleIdentityCollection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authRoleIdentityCollection"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authRoleIdentityCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "auth-role-identity"
        ],
        "summary": "Delete one or more role to identity assignments in this resource server",
        "description": "Delete one or more role to identity assignments in this resource server",
        "operationId": "deleteAuthRoleIdentityCollection",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          }
        ]
      }
    },
    "/docs": {
      "get": {
        "tags": [
          "docs"
        ],
        "summary": "Get the openapi documentation as json",
        "description": "Get the openapi documentation as json",
        "operationId": "getOpenApi",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": []
      }
    },
    "/docs/openapi.{format}": {
      "get": {
        "tags": [
          "docs"
        ],
        "summary": "Get the openapi documentation in the specified format (yaml or json, fallback is json)",
        "description": "Get the openapi documentation in the specified format (yaml or json, fallback is json)",
        "operationId": "getOpenApiInFormat",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "Openapi file format",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "yaml",
                "json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "collection": {
        "title": "collection",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/collectionPagination"
          },
          "data": {
            "description": "",
            "type": "object"
          }
        },
        "type": "object"
      },
      "collectionPagination": {
        "title": "collectionPagination",
        "properties": {
          "page": {
            "description": "The page contained in this collection.",
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "description": "The page size used for reading the collection.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "reportClearingOrderCollection": {
        "title": "reportClearingOrderCollection",
        "description": "A collection of orders for clearing",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/reportClearingOrder"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "reportClearingOrder": {
        "description": "An order for clearing",
        "properties": {
          "orderNumber": {
            "description": "The order number. Note: This can be null if the order was not created via the API.",
            "type": "string"
          },
          "shopOrderId": {
            "description": "The API internal id of the order.",
            "type": "integer",
            "format": "int32"
          },
          "deliveryZipCode": {
            "description": "",
            "type": "string"
          },
          "deliveryCountryCode": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "deliveryCollection": {
        "title": "deliveryCollection",
        "description": "A collection of deliveries",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/delivery"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "delivery": {
        "description": "A delivery of the order",
        "properties": {
          "number": {
            "description": "Number",
            "type": "string"
          },
          "orderNumber": {
            "description": "The order number. Note: This can be null if the delivery has no associated order.",
            "type": "string",
            "nullable": true
          },
          "status": {
            "description": "Status of the delivery.\n- in_progress: The delivery is in the process of being packaged.\n- delivered: The delivery has been transferred to the delivery agent.",
            "type": "string",
            "enum": [
              "in_progress",
              "delivered"
            ]
          },
          "shipments": {
            "description": "List of shipments (= package, parcel, pallet, ...)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/shipment"
            }
          }
        },
        "type": "object"
      },
      "shipment": {
        "description": "A shipments defines a single delivered entity (package, parcel, pallet, ...)",
        "properties": {
          "number": {
            "description": "The delivery number",
            "type": "string"
          },
          "status": {
            "description": "Status of the delivery.\n- in_progress: The delivery is in the process of being packaged.\n- delivered: The delivery has been transferred to the delivery agent.",
            "type": "string",
            "enum": [
              "in_progress",
              "delivered"
            ]
          },
          "deliveryService": {
            "description": "The delivery service used to send this delivery.\nThe codes of supported delivery services can be retrieved from the 'GET /delivery-service' endpoint.",
            "type": "string",
            "nullable": true
          },
          "code": {
            "description": "Carrier specific tracking code",
            "type": "string"
          },
          "link": {
            "description": "Link to the carrier's tracking site",
            "type": "string"
          },
          "weight": {
            "description": "Weight",
            "type": "number",
            "format": "float"
          },
          "weightUnit": {
            "description": "Weight unit",
            "type": "string"
          },
          "shipmentLines": {
            "description": "Shipment lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/shipmentLine"
            }
          }
        },
        "type": "object"
      },
      "shipmentLine": {
        "description": "One piece of content in a shipment",
        "properties": {
          "productNumber": {
            "description": "product number",
            "type": "string"
          },
          "count": {
            "description": "Number of items contained in the delivery",
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "description": "product unit",
            "type": "string",
            "nullable": true
          },
          "serialNumbers": {
            "description": "serial numbers",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "nullable": true
      },
      "stock": {
        "properties": {
          "productNumber": {
            "description": "The product number the stock is available for",
            "type": "string"
          },
          "stock": {
            "description": "The available stock",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "stockCollection": {
        "title": "stockCollection",
        "description": "A collection of stocks",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stock"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "shopCollection": {
        "title": "shopCollection",
        "description": "A collection of shops",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/shop"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "shop": {
        "description": "Data to represent a shop",
        "properties": {
          "id": {
            "description": "Id",
            "type": "string"
          },
          "discoShopCode": {
            "description": "The shopCode used in DISCO.",
            "type": "string"
          },
          "discoReferencePrefix": {
            "description": "The prefix to the references in DISCO.",
            "type": "string"
          },
          "email": {
            "description": "The email used in DISCO.",
            "type": "string"
          },
          "meta": {
            "description": "Meta data of the shop.",
            "properties": {
              "shopifyShopDomain": {
                "description": "Domain of the Shopify shop.",
                "type": "string",
                "nullable": true
              },
              "testShop": {
                "description": "Flag to mark a shop used for testing.",
                "type": "boolean",
                "default": false,
                "nullable": true
              }
            },
            "type": "object",
            "nullable": true,
            "additionalProperties": true
          }
        },
        "type": "object"
      },
      "updateShop": {
        "description": "Fields to update a shop",
        "properties": {
          "meta": {
            "description": "Meta data of the shop.",
            "properties": {
              "shopifyShopDomain": {
                "description": "Domain of the Shopify shop.",
                "type": "string",
                "nullable": true
              }
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object"
      },
      "supplierCollection": {
        "title": "supplierCollection",
        "description": "A collection of suppliers",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "supplier": {
        "title": "supplier",
        "description": "Data to represent a supplier",
        "required": [
          "supplierNumber",
          "name"
        ],
        "properties": {
          "supplierNumber": {
            "description": "",
            "type": "string"
          },
          "name": {
            "description": "Supplier name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "inboundDeliveryCollection": {
        "title": "inboundDeliveryCollection",
        "description": "A collection of inbound deliveries",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/inboundDelivery"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "newInboundDelivery": {
        "title": "newInboundDelivery",
        "description": "Data to create a new inbound delivery",
        "required": [
          "supplierNumber",
          "expectedDeliveryDate",
          "products"
        ],
        "properties": {
          "supplierNumber": {
            "description": "Number of the supplier. Available suppliers can be retrieved from the 'GET /supplier' endpoint.",
            "type": "string"
          },
          "expectedDeliveryDate": {
            "description": "Expected date of the delivery",
            "type": "string",
            "format": "date"
          },
          "products": {
            "description": "Products in the inbound delivery",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inboundDeliveryProduct"
            }
          }
        },
        "type": "object"
      },
      "inboundDelivery": {
        "title": "inboundDelivery",
        "description": "Data to represent an inbound delivery",
        "allOf": [
          {
            "$ref": "#/components/schemas/newInboundDelivery"
          },
          {
            "properties": {
              "inboundDeliveryNumber": {
                "description": "",
                "type": "string"
              },
              "shopWAWIDeliveryId": {
                "description": "The API internal id of the inbound delivery.",
                "type": "integer",
                "format": "int32"
              },
              "status": {
                "description": "Status of the inbound delivery.\nThe status for not yet completed is subject to change. you may poll for changes.\n- open: The inbound delivery has not yet been delivered.\n- in_progress: The inbound delivery is being processed in our warehouse.\n- completed: The inbound delivery has been processed in our warehouse.\n- deleted: The inbound delivery has been deleted.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "open",
                  "completed",
                  "deleted"
                ]
              },
              "shopCode": {
                "description": "The shopCode used in DISCO.",
                "type": "string",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "inboundDeliveryProduct": {
        "title": "inboundDeliveryProduct",
        "required": [
          "productNumber",
          "count"
        ],
        "properties": {
          "productNumber": {
            "description": "Product number",
            "type": "string"
          },
          "count": {
            "description": "Number of products in the inbound delivery",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "baseOrder": {
        "title": "baseOrder",
        "description": "Data to represent an order",
        "required": [
          "customer",
          "orderItems"
        ],
        "properties": {
          "shopCode": {
            "description": "The shopCode used in DISCO.",
            "type": "string",
            "nullable": true
          },
          "customer": {
            "$ref": "#/components/schemas/baseOrderCustomer"
          },
          "orderItems": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderItem"
            }
          },
          "options": {
            "description": "Additional options (optional, TBD)",
            "type": "object",
            "nullable": true
          }
        },
        "type": "object"
      },
      "newOrder": {
        "title": "newOrder",
        "description": "Data to create a new order",
        "required": [
          "customer",
          "orderItems"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrder"
          },
          {
            "properties": {
              "customer": {
                "$ref": "#/components/schemas/newOrderCustomer"
              },
              "orderItems": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/newOrderItem"
                },
                "maxItems": 1000
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "options": {
                "$ref": "#/components/schemas/NewOrderOptions"
              }
            },
            "type": "object"
          }
        ]
      },
      "OrderOptions": {
        "title": "OrderOptions",
        "description": "Additional optional options for the order."
      },
      "NewOrderOptions": {
        "title": "NewOrderOptions",
        "description": "Additional optional options for a new order.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderOptions"
          },
          {
            "properties": {
              "autoProcessState": {
                "description": "By setting this option, the order will be processed into the defined state.\\\nThis option is NOT available in the production systems.\\\nThe autoprocessing of the state happens after the order has been sucessfully created.\nIn case of any errors during the autoprocessing of the state, error messages are shown but the order will still have been created and is not rolled back.\n\nAvailable states:\n- order_completed_single_delivery: The order is completely delivered within one shipment\n- order_completed_multiple_deliveries: The order is completely delivered and includes several shipments\n- order_partially_delivered: The order is in progress and one of several shipments is delivered\n- order_canceled: The order is canceled\n- order_locked: The order is locked\n",
                "type": "string",
                "enum": [
                  "order_completed_single_delivery",
                  "order_completed_multiple_deliveries",
                  "order_partially_delivered",
                  "order_canceled",
                  "order_locked"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "order": {
        "title": "order",
        "description": "Data to represent an order",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrder"
          },
          {
            "properties": {
              "orderNumber": {
                "description": "The order number. Note: This can be null if the order as not created via the API.",
                "type": "string"
              },
              "orderItems": {
                "description": "Note: canceled orderItems are NOT included.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/orderItem"
                }
              },
              "customer": {
                "$ref": "#/components/schemas/orderCustomer"
              },
              "status": {
                "description": "The current status of the order.\n- new: The order was created but not every required information was given. The order can not be processed without manual intervention.\n- processing: The order is being processed. For split deliveries, some of the shipments might have already been transferred to the delivery agent.\n- delivered: The orders shipments have all been transferred to the delivery agent.\n- deleted: The order has been cancelled.\n- locked: The order is locked. The order can not be processed without manual intervention.\n- examination: The order has been manually locked.  The order can not be processed without manual intervention.\n",
                "type": "string",
                "enum": [
                  "new",
                  "processing",
                  "delivered",
                  "deleted",
                  "locked",
                  "examination"
                ]
              },
              "orderDate": {
                "description": "The create date for the order. Default is the current date. Format in ISO 8601",
                "type": "string",
                "format": "date-time",
                "example": "2020-04-24T12:27:00+02:00"
              },
              "delivery": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/orderDelivery"
                },
                "nullable": true
              },
              "payment": {
                "$ref": "#/components/schemas/orderPayment"
              },
              "shipping": {
                "$ref": "#/components/schemas/orderShipping"
              }
            },
            "type": "object"
          }
        ]
      },
      "orderItem": {
        "title": "orderItem",
        "required": [
          "productNumber",
          "count"
        ],
        "properties": {
          "productNumber": {
            "description": "",
            "type": "string"
          },
          "title": {
            "description": "Item title (optional)",
            "type": "string",
            "nullable": true
          },
          "count": {
            "description": "Positive number of items to order",
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/orderItemPrice"
              }
            ]
          },
          "options": {
            "description": "Additional options (optional, TBD)",
            "type": "object",
            "nullable": true
          }
        },
        "type": "object"
      },
      "newOrderItem": {
        "title": "newOrderItem",
        "allOf": [
          {
            "$ref": "#/components/schemas/orderItem"
          }
        ]
      },
      "orderItemPrice": {
        "title": "orderItemPrice",
        "required": [
          "value",
          "type",
          "vat",
          "currencyCode"
        ],
        "properties": {
          "value": {
            "description": "The price value rounded to 2 decimals, dot as separator",
            "type": "number",
            "format": "float",
            "example": "10.99"
          },
          "type": {
            "description": "The price type",
            "type": "string",
            "enum": [
              "net",
              "gross"
            ],
            "example": "gross"
          },
          "vat": {
            "description": "The VAT in percent",
            "type": "number",
            "format": "float",
            "example": "20"
          },
          "currencyCode": {
            "description": "The currency code (ISO 4217)",
            "type": "string",
            "example": "EUR"
          }
        },
        "type": "object"
      },
      "baseOrderCustomer": {
        "title": "baseOrderCustomer",
        "required": [
          "gender",
          "languageCode",
          "deliveryAddress"
        ],
        "properties": {
          "gender": {
            "description": "",
            "type": "string",
            "enum": [
              "male",
              "female",
              "unknown"
            ]
          },
          "languageCode": {
            "description": "The language code for any customer communications (ISO 639-1)",
            "type": "string"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/orderCustomerDeliveryAddress"
          }
        },
        "type": "object"
      },
      "newOrderCustomer": {
        "title": "newOrderCustomer",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrderCustomer"
          }
        ]
      },
      "orderCustomer": {
        "title": "orderCustomer",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrderCustomer"
          },
          {
            "properties": {
              "number": {
                "description": "",
                "type": "string",
                "nullable": true
              },
              "type": {
                "description": "The customer type",
                "type": "string",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "orderCustomerAddress": {
        "title": "orderCustomerAddress",
        "required": [
          "street",
          "streetNumber",
          "zipCode",
          "city",
          "countryCode"
        ],
        "properties": {
          "street": {
            "description": "",
            "type": "string"
          },
          "streetNumber": {
            "description": "",
            "type": "string"
          },
          "zipCode": {
            "description": "",
            "type": "string"
          },
          "district": {
            "description": "",
            "type": "string",
            "nullable": true
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "provinceCode": {
            "description": "Province code (ISO 3166-2)",
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "description": "Country code (ISO 3166-1 alpha-2)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "orderCustomerDeliveryAddress": {
        "title": "orderCustomerDeliveryAddress",
        "allOf": [
          {
            "$ref": "#/components/schemas/orderCustomerAddress"
          },
          {
            "required": [
              "nameLine1"
            ],
            "properties": {
              "nameLine1": {
                "description": "",
                "type": "string"
              },
              "nameLine2": {
                "description": "",
                "type": "string",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "orderCustomerInvoiceAddress": {
        "title": "orderCustomerInvoiceAddress",
        "allOf": [
          {
            "$ref": "#/components/schemas/orderCustomerAddress"
          }
        ]
      },
      "orderPayment": {
        "title": "orderPayment",
        "description": "Options regarding the payment of the order",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The payment method",
            "type": "string",
            "enum": [
              "invoice"
            ]
          }
        },
        "type": "object"
      },
      "orderShipping": {
        "title": "orderShipping",
        "description": "Options regarding the shipping of the order",
        "required": [
          "deliveryService"
        ],
        "properties": {
          "deliveryService": {
            "description": "The delivery service to recommend for usage.\nThe codes of supported delivery services can be retrieved from the 'GET /delivery-service' endpoint.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "orderDelivery": {
        "title": "orderDelivery",
        "description": "The delivery for the order. Details can be read by GET /delivery/.",
        "properties": {
          "number": {
            "description": "",
            "type": "string"
          },
          "status": {
            "description": "Status code of the delivery",
            "type": "string"
          }
        },
        "type": "object"
      },
      "deliveryService": {
        "title": "deliveryService",
        "description": "Data to represent a delivery service",
        "properties": {
          "code": {
            "description": "Code of the delivery service",
            "type": "string"
          }
        },
        "type": "object"
      },
      "deliveryServiceCollection": {
        "title": "deliveryServiceCollection",
        "description": "A collection of delivery services",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/deliveryService"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "authRoleIdentityResource": {
        "required": [
          "roleCode",
          "identityId"
        ],
        "properties": {
          "roleCode": {
            "description": "Role Code",
            "type": "string"
          },
          "identityId": {
            "description": "Identity ID",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authRoleIdentityCollection": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authRoleIdentityResource"
        }
      },
      "authPermissionResource": {
        "required": [
          "permissionCode",
          "name"
        ],
        "properties": {
          "permissionCode": {
            "description": "Permission Code",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "getAuthPermissionCollectionResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authPermissionResource"
        }
      },
      "authRoleCollection": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authRoleResource"
        }
      },
      "authRoleResource": {
        "required": [
          "roleCode",
          "name"
        ],
        "properties": {
          "roleCode": {
            "description": "Role Code",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "errorResponse": {
        "properties": {
          "errors": {
            "description": "errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "type": "object"
      },
      "error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "description": "Code",
            "type": "string"
          },
          "message": {
            "description": "Message",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        }
      },
      "500": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        }
      },
      "default": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "oAuthAuthorization": {
        "type": "oauth2",
        "description": "OAuth2 Authorization",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://authentication-api.conqore.niceshops.com/oauth/token",
            "refreshUrl": "UNDEFINED",
            "scopes": {}
          }
        }
      }
    }
  }
}