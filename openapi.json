{
  "openapi": "3.0.0",
  "info": {
    "title": "Fulfillment API",
    "description": "\n- alpha: Currently developed API version. Subject to major changes.\n- beta: A semi-stable early access version. New features can be added. Breaking changes are possible.\n- stable: The API is recommended for use in production.\n\n[Changelog](https://fulfillment-api.conqore.niceshops.com/v2/docs/changelog.html)\n\nAll data is transferred in UTF-8 encoding.\\\nThe API uses stateless HTTP. No cookies have to be kept.\\\nAuthentication via OAuth2 client credentials flow.\n\n[Fulfillment API PHP client @Packagist](https://packagist.org/packages/datenkraft/bb-fulfillment-api-php-client)",
    "version": "v2.beta"
  },
  "servers": [
    {
      "url": "https://fulfillment-api.conqore.niceshops.com/v2",
      "description": "Production Server"
    }
  ],
  "paths": {
    "/order/{orderNumber}": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get an order by order number.",
        "description": "Get an order by order number.",
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "orderNumber",
            "in": "path",
            "description": "The order number as defined during the creation of the order.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 54
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Add a new order.",
        "description": "Add a new order referenced by the given orderNumber.",
        "operationId": "postOrder",
        "parameters": [
          {
            "name": "orderNumber",
            "in": "path",
            "description": "The number the order should be refered by.\n    This number is user defined, must be unique and has a maximum length (check maxLength field).",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 54
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/order/{orderNumber}/cancel": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Cancel an order.",
        "description": "Cancel the order specified by the given order number (set in param orderNumber). An orderNumber from a canceled order cannot be used for a new order, because they must always be unique.",
        "operationId": "cancelOrder",
        "parameters": [
          {
            "name": "orderNumber",
            "in": "path",
            "description": "The number the order is refered by.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 54
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\n\nAvailable message codes:\n- ORDER_NOT_CANCELABLE: The order could not be canceled anymore\n- ORDER_ALREADY_CANCELED: The order is already canceled\n- ORDER_CANCELLATION_ALREADY_EXISTS: An order cancellation request already exists, which needs manual approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/order": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get a list of shop oders.",
        "description": "Get a list of shop orders.",
        "operationId": "getOrderCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter for status/statuses (optional).",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "single status": {
                "summary": "single shop order status",
                "value": "processing"
              },
              "multiple statuses": {
                "summary": "multiple shop order statuses",
                "value": "processing,canceled"
              }
            }
          },
          {
            "name": "filter[externalOrderId]",
            "in": "query",
            "description": "Filter for the external order ID e.g. from third party apps (optional)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "SY_1042"
          },
          {
            "name": "filter[externalCustomerId]",
            "in": "query",
            "description": "Filter for the external customer ID e.g. from third party apps (optional)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "564132551"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orderCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/order/{orderNumber}/redact": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Redact an order.",
        "description": "Redact the order and all other orders linked to the given order number (set in the param\norderNumber) in a GDPR article 17 conform way. <br />\n\nOnly orders with one of the following statuses are redactable:\n- delivered\n- deleted\n- canceled",
        "operationId": "redactOrder",
        "parameters": [
          {
            "name": "orderNumber",
            "in": "path",
            "description": "The number the order is refered by.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 54
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\n\nAvailable message codes:\n- ORDER_NOT_REDACTABLE: The order is not redactable because of status conflicts\n- ORDER_ALREADY_REDACTED: The order is already redacted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/delivery/{deliveryNumber}": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "Get the delivery with the given deliveryNumber.",
        "description": "Get the delivery with the given deliveryNumber.",
        "operationId": "getDelivery",
        "parameters": [
          {
            "name": "deliveryNumber",
            "in": "path",
            "description": "delivery number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delivery"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/delivery": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "Get deliveries filtered by a single or multiple order numbers.",
        "description": "Get deliveries filtered by a single or multiple order numbers.",
        "operationId": "getDeliveryCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[orderNumber]",
            "in": "query",
            "description": "A filter for a single order number or multiple order numbers separted by a comma.\n- The filter can contain a maximum of 100 order numbers.\n- The order numbers in the filter must be unique.\n- A single order number can have a maximum length of 59 characters.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "single order number": {
                "summary": "single order number",
                "value": [
                  "100123123"
                ]
              },
              "multiple order numbers": {
                "summary": "multiple order numbers",
                "value": [
                  "100123123,100123124"
                ]
              }
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deliveryCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/delivery/{deliveryNumber}/shipment/{shipmentNumber}": {
      "patch": {
        "tags": [
          "delivery"
        ],
        "summary": "Patch data of the shipment of the delivery specified by the given delivery and shipment numbers.",
        "description": "Patch data of the shipment of the delivery specified by the given delivery and shipment numbers.",
        "operationId": "patchDeliveryShipment",
        "parameters": [
          {
            "name": "deliveryNumber",
            "in": "path",
            "description": "Number of the delivery.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "L41520000022100001"
          },
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "Number of the shipment",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "L41520000022100001"
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateDeliveryShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deliveryShipment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product-unit": {
      "get": {
        "tags": [
          "product-unit"
        ],
        "summary": "Get all available product unit codes",
        "description": "Get all available product unit codes.",
        "operationId": "getProductUnitCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 20.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productUnitCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/inbound-delivery/{inboundDeliveryNumber}": {
      "get": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Get an inbound delivery by inbound delivery number.",
        "description": "Get an inbound delivery by inbound delivery number.",
        "operationId": "getInboundDelivery",
        "parameters": [
          {
            "name": "inboundDeliveryNumber",
            "in": "path",
            "description": "The inbound delivery number as defined during the creation of the inbound delivery.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inboundDelivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Add a new inbound delivery.",
        "description": "Add a new inbound delivery referenced by the given deliveryNumber.",
        "operationId": "postInboundDelivery",
        "parameters": [
          {
            "name": "inboundDeliveryNumber",
            "in": "path",
            "description": "The number the inbound delivery should be refered by.\nThis number is user defined, must be unique and has a maximum length (check maxLength field).",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newInboundDelivery"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inboundDelivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bulk-import/template/inbound-delivery.{format}": {
      "get": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Get a spreadsheet template for performing POST queries to the respective endpoint.",
        "description": "Get a spreadsheet template for performing POST queries to the respective endpoint.",
        "operationId": "getInboundDeliveryBulkImportTemplate",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "The inbound delivery number as defined during the creation of the inbound delivery.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "xlsx",
                "csv"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              },
              "text/xlsx": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/inbound-delivery": {
      "get": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Get a list of inbound deliveries.",
        "description": "Get a list of inbound deliveries.",
        "operationId": "getInboundDeliveryCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Status of the inbound delivery (optional).\n\nThe status for not yet completed is subject to change. you may poll for changes.\n- open: The inbound delivery has not yet been delivered.\n- in_progress: The inbound delivery is being processed in our warehouse.\n- completed: The inbound delivery has been processed in our warehouse.\n- deleted: The inbound delivery has been deleted.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "single status": {
                "summary": "single inbound delivery status",
                "value": "in_progress"
              },
              "multiple status": {
                "summary": "multiple inbound delivery status",
                "value": "in_progress,open"
              }
            }
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inboundDeliveryCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bulk-import/inbound-delivery.{format}": {
      "post": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Import one or more new inbound deliveries.",
        "description": "Import one or more new inbound deliveries.",
        "operationId": "inboundDeliveryBulkImport",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "The format for the upload.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "xlsx",
                "csv"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "description": "file to upload",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "code",
                      "message",
                      "content",
                      "reference"
                    ],
                    "properties": {
                      "code": {
                        "description": "HTTP Status code of the single request",
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "description": "Description for the HTTP Status code of the single request",
                        "type": "string"
                      },
                      "reference": {
                        "description": "Reference for the entry tried to post represented by a key-value pair.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "content": {
                        "type": "object",
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/inboundDelivery"
                          },
                          {
                            "$ref": "#/components/schemas/errorResponse"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/inbound-delivery/{inboundDeliveryNumber}/cancel": {
      "post": {
        "tags": [
          "inbound-delivery"
        ],
        "summary": "Cancel a inbound delivery.",
        "description": "Cancel a inbound delivery referenced by the given inboundDeliveryNumber. An inboundDeliveryNumber from a canceled inbound delivery cannot be used for a new inbound delivery, because they must always be unique.",
        "operationId": "cancelInboundDelivery",
        "parameters": [
          {
            "name": "inboundDeliveryNumber",
            "in": "path",
            "description": "The number the inbound delivery should be refered by.\nThis number is user defined, must be unique and has a maximum length (check maxLength field).",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inboundDelivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/country": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Read a country collection of all countries available for shipments.",
        "description": "Collections are read in multiple pages with a defined page size.",
        "operationId": "getCountryCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 20.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/countryCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/manufacturer": {
      "get": {
        "tags": [
          "manufacturer"
        ],
        "summary": "Get a list of manufacturers.",
        "description": "Get a list of manufacturers.",
        "operationId": "getManufacturerCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/manufacturerCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/shop": {
      "get": {
        "tags": [
          "shop"
        ],
        "summary": "Get a list of shops the used identity is assigned to.",
        "description": "Get a list of shops the used identity is assigned to.",
        "operationId": "getShopCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[meta][shopifyShopDomain]",
            "in": "query",
            "description": "A filter for the Shopify hostname of the shop.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shopCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/shop/{shopId}": {
      "patch": {
        "tags": [
          "shop"
        ],
        "summary": "Update a shop",
        "description": "Update one or more fields of a shop. Only a limited set of fields can be updated.",
        "operationId": "patchShop",
        "parameters": [
          {
            "name": "shopId",
            "in": "path",
            "description": "Shop Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateShop"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shop"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/report/clearing/orders": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Read the created orders for the given shopCode in the given dateRange.",
        "description": "Read the created orders for the given shopCode in the given dateRange.",
        "operationId": "getOrderReportClearingCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 20.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          },
          {
            "name": "filter[dateFrom]",
            "in": "query",
            "description": "The start date (inclusive) in format Y-m-d (timezone CET/CEST) for which orders should be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "filter[dateTo]",
            "in": "query",
            "description": "The end date (inclusive) in format Y-m-d (timezone CET/CEST) for which orders should be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportClearingOrderCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/delivery-service": {
      "get": {
        "tags": [
          "delivery-service"
        ],
        "summary": "Get delivery services.",
        "description": "Get delivery services.",
        "operationId": "getDeliveryServiceCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deliveryServiceCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/supplier": {
      "get": {
        "tags": [
          "supplier"
        ],
        "summary": "Get suppliers filtered by shopCode.",
        "description": "Get suppliers filtered by shopCode.",
        "operationId": "getSupplierCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 20.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplierCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/{productNumber}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get a product by product number.",
        "description": "Get a product by product number.",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "productNumber",
            "in": "path",
            "description": "The product number as defined during the creation of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Add a new product.",
        "description": "Add a new product referenced by the given productNumber.\nPlease note that due to necessary product compliance enabling by our steve team, you might not be able to use all sent products immediately.",
        "operationId": "postProduct",
        "parameters": [
          {
            "name": "productNumber",
            "in": "path",
            "description": "The number the product should be refered by.\n    This number is user defined, must be unique and has a maximum length (check maxLength field).",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newProduct"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get a list of products.",
        "description": "Get a list of products.",
        "operationId": "getProductCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          },
          {
            "name": "filter[search]",
            "in": "query",
            "description": "Filter for product search.\\\nUsage:\n- Provide one or multiple search terms to filter results.\n- Multiple search terms are separated by spaces.\n- The search is not case sensitive.\n- The search is enabled for the fields productTitle and productNumber.\n- Each search term filters the response for products where at least one of the fields contains the search term.\n- For example, filter[search]='term1 term2' will filter the result for products where 'term1' is found in any field and 'term2' is also found in any field.\\\nIf only 'term1' or 'term2' is found in the fields, the product is not included in the results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/{productNumber}/journal": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Read a journal collection for a specific product showing the history of stock changes.",
        "description": "Read a journal collection for a specific product showing the history of stock changes.",
        "operationId": "getProductJournalCollection",
        "parameters": [
          {
            "name": "productNumber",
            "in": "path",
            "description": "The product number as defined during the creation of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 100.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "shopCode",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          },
          {
            "name": "filter[dateFrom]",
            "in": "query",
            "description": "The start date (inclusive) in format Y-m-d (timezone CET/CEST) for which product journal entries should be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "filter[dateTo]",
            "in": "query",
            "description": "The end date (inclusive) in format Y-m-d (timezone CET/CEST) for which product journal entries should be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productJournalCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/stock": {
      "get": {
        "tags": [
          "stock"
        ],
        "summary": "Get the stock for all (per default only valid) products or for a specific product.",
        "description": "Get the stock for all (per default only valid) products or for a specific product.",
        "operationId": "getStockCollection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to read. Default is the first page.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum size per page is 100. Default is 20.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 20
          },
          {
            "name": "filter[productNumber]",
            "in": "query",
            "description": "Filter for product number(s) (optional).",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "single product number": {
                "summary": "single product number",
                "value": "test-1"
              },
              "multiple product numbers": {
                "summary": "multiple product numbers",
                "value": "test-1,test-2,test-3"
              }
            }
          },
          {
            "name": "filter[shopCode]",
            "in": "query",
            "description": "The shopCode used internally to distinguish between clients.<br />\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "teststeve"
          },
          {
            "name": "filter[productStatus]",
            "in": "query",
            "description": "filter for productStatus\\\nBy default, only valid products (available or in stock) are returned.\\\nUse '_all' to return all products (also invalid products)\\\nUse '_invalid' to specifically return invalid products (not available and out of stock)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "_all",
                "_invalid"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stockCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/docs": {
      "get": {
        "tags": [
          "docs"
        ],
        "summary": "Get the openapi documentation as json",
        "description": "Get the openapi documentation as json",
        "operationId": "getOpenApi",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": []
      }
    },
    "/docs/openapi.{format}": {
      "get": {
        "tags": [
          "docs"
        ],
        "summary": "Get the openapi documentation in the specified format",
        "description": "Get the openapi documentation in the specified format",
        "operationId": "getOpenApiInFormat",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "Openapi file format",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "yaml",
                "json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/docs/changelog.{format}": {
      "get": {
        "tags": [
          "docs"
        ],
        "summary": "Get the changelog in the specified format",
        "description": "Get the changelog in the specified format",
        "operationId": "getChangelogInFormat",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "Changelog file format",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "md",
                "html"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid format"
          },
          "404": {
            "description": "Changelog not found"
          }
        }
      }
    },
    "/auth/role": {
      "get": {
        "tags": [
          "auth-role"
        ],
        "summary": "Get all available roles from this resource server",
        "description": "Get all available roles from this resource server",
        "operationId": "getAuthRoleCollection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authRoleCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/auth/role-identity": {
      "get": {
        "tags": [
          "auth-role-identity"
        ],
        "summary": "Get all role to identity assignments from this resource server",
        "description": "Get all role to identity assignments from this resource server",
        "operationId": "getAuthRoleIdentityCollection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authRoleIdentityCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "auth-role-identity"
        ],
        "summary": "Create one or more role to identity assignments in this resource server",
        "description": "Create one or more role to identity assignments in this resource server",
        "operationId": "postAuthRoleIdentityCollection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authRoleIdentityCollection"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authRoleIdentityCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "auth-role-identity"
        ],
        "summary": "Delete one or more role to identity assignments in this resource server",
        "description": "Delete one or more role to identity assignments in this resource server",
        "operationId": "deleteAuthRoleIdentityCollection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authRoleIdentityCollection"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oAuthAuthorization": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "errorResponse": {
        "properties": {
          "errors": {
            "description": "errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "type": "object"
      },
      "informationResponse": {
        "properties": {
          "information": {
            "description": "information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/information"
            }
          }
        },
        "type": "object"
      },
      "information": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/error"
          }
        ]
      },
      "error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "description": "Code",
            "type": "string"
          },
          "message": {
            "description": "Message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "collection": {
        "title": "collection",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/collectionPagination"
          },
          "data": {
            "description": "",
            "type": "object"
          }
        },
        "type": "object"
      },
      "collectionPagination": {
        "title": "collectionPagination",
        "properties": {
          "page": {
            "description": "The page contained in this collection.",
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "description": "The page size used for reading the collection.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "inboundDeliveryCollection": {
        "title": "inboundDeliveryCollection",
        "description": "A collection of inbound deliveries",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/inboundDelivery"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "newInboundDelivery": {
        "title": "newInboundDelivery",
        "description": "Data to create a new inbound delivery",
        "required": [
          "supplierNumber",
          "expectedDeliveryDate",
          "products"
        ],
        "properties": {
          "inboundDeliveryName": {
            "description": "Optional free-text reference for inbound delivery.",
            "type": "string",
            "nullable": true
          },
          "supplierNumber": {
            "description": "Number of the supplier. Available suppliers can be retrieved from the 'GET /supplier' endpoint.",
            "type": "string"
          },
          "expectedDeliveryDate": {
            "description": "Expected date of the delivery (timezone CET/CEST)",
            "type": "string",
            "format": "date"
          },
          "products": {
            "description": "Products in the inbound delivery",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/newInboundDeliveryProduct"
            }
          }
        },
        "type": "object"
      },
      "inboundDelivery": {
        "title": "inboundDelivery",
        "description": "Data to represent an inbound delivery",
        "allOf": [
          {
            "$ref": "#/components/schemas/newInboundDelivery"
          },
          {
            "properties": {
              "inboundDeliveryNumber": {
                "description": "Number of the inbound delivery",
                "type": "string",
                "nullable": true
              },
              "shopWAWIDeliveryId": {
                "description": "The API internal id of the inbound delivery.",
                "type": "integer",
                "format": "int32"
              },
              "status": {
                "description": "Status of the inbound delivery.\nThe status for not yet completed is subject to change. you may poll for changes.\n- open: The inbound delivery has not yet been delivered.\n- in_progress: The inbound delivery is being processed in our warehouse.\n- completed: The inbound delivery has been processed in our warehouse.\n- deleted: The inbound delivery has been deleted.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "open",
                  "completed",
                  "deleted"
                ]
              },
              "products": {
                "description": "Products in the inbound delivery",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/inboundDeliveryProduct"
                }
              },
              "shopCode": {
                "description": "The shopCode used internally to distinguish between clients.",
                "type": "string",
                "nullable": true
              },
              "startDate": {
                "description": "Start date of the delivery (timezone CET/CEST)",
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "endDate": {
                "description": "End date of the delivery (timezone CET/CEST)",
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "deliverySlipNumber": {
                "description": "Number of the inbound delivery on the delivery slip.\nIf the field is empty or not set in the database (e.g. the inbound delivery has not yet arrived in our warehouse), null will be returned.\nIf an empty string (\") is returned, it means that no delivery slip number is available for the inbound delivery.",
                "type": "string",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "inboundDeliveryProduct": {
        "title": "inboundDeliveryProduct",
        "required": [
          "productNumber",
          "announcedCount"
        ],
        "properties": {
          "productNumber": {
            "description": "Product number",
            "type": "string"
          },
          "announcedCount": {
            "description": "Number of announced products in the inbound delivery",
            "type": "integer",
            "format": "int32"
          },
          "productTitle": {
            "description": "Title of the product",
            "type": "string"
          },
          "deliveredCount": {
            "description": "Number of actual delivered products in the inbound delivery",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "newInboundDeliveryProduct": {
        "title": "newInboundDeliveryProduct",
        "required": [
          "productNumber",
          "announcedCount"
        ],
        "properties": {
          "productNumber": {
            "description": "Product number",
            "type": "string"
          },
          "announcedCount": {
            "description": "Number of announced products in the inbound delivery",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "productCollection": {
        "title": "productCollection",
        "description": "A collection of products",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/product"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "productJournal": {
        "title": "productJournal",
        "properties": {
          "journalId": {
            "description": "The API internal id of the journal entry.",
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "description": "The date and time at which the journal entry was created. Format in ISO 8601.",
            "type": "string",
            "format": "date-time",
            "example": "2020-04-24T12:27:00+02:00"
          },
          "productNumber": {
            "description": "The number of the product which the journal entry refers to.",
            "type": "string"
          },
          "reason": {
            "description": "The code that defines the reason for the stock change.",
            "type": "string",
            "enum": [
              "expired",
              "damaged",
              "own_withdrawal",
              "correction",
              "niceshops_order",
              "inbound",
              "fulfillment",
              "return"
            ]
          },
          "stockDelta": {
            "description": "The change of the stock.\\\nNote: This might not be set for all reasons.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stockOld": {
            "description": "The old value of the stock before applying the delta.\\\nNote: This might not be set for all reasons.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stockNew": {
            "description": "The new value of the stock when the journal entry was created.\\\nNote: This might not be set for all reasons.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "type": "object"
      },
      "productJournalCollection": {
        "title": "productJournalCollection",
        "description": "A collection of product journals",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/productJournal"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "baseProduct": {
        "title": "baseProduct",
        "description": "Data to represent a product",
        "properties": {
          "productType": {
            "description": "Type of the product ('standard' if no value is provided)",
            "type": "string",
            "default": "standard",
            "enum": [
              "standard",
              "sample",
              "sellable_sample",
              "tester",
              "packing_material",
              "booking_seminar",
              "booking_appointment",
              "promo_material",
              "raw_material",
              "working_material",
              "service_principal",
              "service_ancillary",
              "inquiry_testdrive",
              "inquiry_raffle"
            ]
          },
          "productTitle": {
            "description": "Title of the product",
            "type": "string"
          },
          "productTitleOriginal": {
            "description": "Original title of the product",
            "type": "string"
          },
          "articleLongDescription": {
            "description": "Long description of the article",
            "type": "string"
          },
          "articleVariantTitle": {
            "description": "The title of the article variant. \\\nMust not be set when the articleVariantType is 'standard_autotitle'.",
            "type": "string",
            "nullable": true
          },
          "articleVariantType": {
            "description": "The type of the article variant ('standard_autotitle' if no value is provided). \\\nThe articleVariantType 'standard_autotitle' is only allowed for the variantGroup 'content'",
            "type": "string",
            "default": "standard_autotitle",
            "enum": [
              "standard",
              "standard_autotitle",
              "personalized"
            ],
            "nullable": true
          },
          "articleStatus": {
            "description": "Status of the article regarding visibility ('active' if no value is provided)",
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "temporary_inactive",
              "preparation_inactive",
              "inactive_but_visible",
              "inactive"
            ],
            "nullable": true
          },
          "contentsAmount": {
            "description": "Amount of the product contents (1 if no value is provided)",
            "type": "number",
            "format": "float",
            "default": "1",
            "nullable": true
          },
          "contentsUnit": {
            "description": "Unit of the product contents ('stk' if no value is provided).",
            "type": "string",
            "default": "stk",
            "nullable": true
          },
          "contentsWeightGram": {
            "description": "Weight of the product contents in gram",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "weightGram": {
            "description": "Total weight of the product in gram",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "variantGroup": {
            "description": "The variant group of the product",
            "type": "string",
            "default": "content",
            "enum": [
              "color",
              "size",
              "content",
              "einzelvariante",
              "standard_title"
            ]
          },
          "ean": {
            "description": "The EAN of the product",
            "type": "string",
            "nullable": true
          },
          "taricCode": {
            "description": "The TARIC code of the product",
            "type": "string"
          },
          "listPriceEUR": {
            "description": "The list price of the product in EUR",
            "type": "number",
            "format": "float"
          },
          "suggestedRetailPriceEUR": {
            "description": "The suggested retail price for the product in EUR",
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "taxCode": {
            "description": "One of the available tax codes.\n- std: Standard tax rate (AT 20%)\n- spc: 1st tax rate (AT 13%)\n- erm: 2nd tax rate (AT 10%)\n- erm3: 3rd tax rate (AT 5%)\n- nsp: not taxable (0%)",
            "type": "string",
            "enum": [
              "std",
              "spc",
              "erm",
              "erm3",
              "nsp"
            ]
          },
          "purchasePrices": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/productPurchasePrice"
            },
            "nullable": true
          },
          "manufacturerNumber": {
            "description": "Number of the manufacturer.",
            "type": "string"
          },
          "manufacturerCountryCode": {
            "description": "Country code of the manufacturer (ISO 3166-1 alpha-2)",
            "type": "string",
            "default": "AT",
            "nullable": true
          },
          "supplierNumber": {
            "description": "Number of the supplier",
            "type": "string"
          },
          "languageCode": {
            "description": "The language code used for the product (ISO 639-1)",
            "type": "string",
            "default": "de"
          }
        },
        "type": "object"
      },
      "newProduct": {
        "title": "newProduct",
        "description": "Data to create a new product",
        "required": [
          "productTitle",
          "productTitleOriginal",
          "articleShortDescription",
          "articleLongDescription",
          "variantGroup",
          "taricCode",
          "listPriceEUR",
          "taxCode",
          "manufacturerNumber",
          "supplierNumber",
          "languageCode"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/baseProduct"
          },
          {
            "properties": {
              "productStatus": {
                "description": "Status of the product regarding sales.\n\nAvailable values:\n- enabled: Product is on sale (default)\n- enabled_external_only: Product is only available in external stores",
                "type": "string",
                "default": "enabled",
                "enum": [
                  "enabled",
                  "enabled_external_only"
                ],
                "nullable": true
              },
              "articleShortDescription": {
                "description": "Short description of the article.",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "product": {
        "title": "product",
        "description": "Data to represent a product",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseProduct"
          },
          {
            "properties": {
              "productStatus": {
                "description": "Status of the product regarding sales.\n\nAvailable values:\n- enabled: Product is on sale\n- enabled_external_only: Product is only available in external stores\n- deleted: Product is deleted\n- discontinued: Product is disontinued\n- expired: Product is expired\n- incorrect: Product was incorrectly created\n- internal: Product is available for internal sales only\n- preparation: Product is in preparation for sale",
                "type": "string",
                "default": "enabled",
                "enum": [
                  "enabled",
                  "enabled_external_only",
                  "deleted",
                  "discontinued",
                  "expired",
                  "incorrect",
                  "internal",
                  "preparation"
                ]
              },
              "articleShortDescription": {
                "description": "Short description of the article. \\\nNote: This can be null if the product was not created via the API.",
                "type": "string",
                "nullable": true
              },
              "productNumber": {
                "description": "",
                "type": "string"
              },
              "shopCode": {
                "description": "The shop to which the product belongs",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "productPurchasePrice": {
        "title": "productPurchasePrice",
        "required": [
          "currencyCode",
          "amount",
          "pricePerUnit"
        ],
        "properties": {
          "currencyCode": {
            "description": "The currency code (ISO 4217)",
            "type": "string",
            "example": "EUR"
          },
          "amount": {
            "description": "Amount of purchased products",
            "type": "integer",
            "format": "int32"
          },
          "pricePerUnit": {
            "description": "The price per product unit",
            "type": "number",
            "format": "float"
          }
        },
        "type": "object"
      },
      "stock": {
        "description": "Stock of a product",
        "properties": {
          "productNumber": {
            "description": "Product number",
            "type": "string"
          },
          "stocked": {
            "description": "Amount stocked in the warehouse - without considering the reserved amount for ongoing orders",
            "type": "integer"
          },
          "reserved": {
            "description": "Amount reserved for ongoing orders",
            "type": "integer"
          },
          "available": {
            "description": "Amount available for orders - with the reserved amount for ongoing orders taken into account",
            "type": "integer"
          },
          "incoming": {
            "description": "Amount of ongoing inbound deliveries",
            "type": "integer"
          },
          "overbookingPossibilityStatus": {
            "description": "Status regarding the possibility of overbooking\n- possible: Overbooking is possible\n- not_possible: Overbooking is not possible\n- only_inbound_deliveries: Overbooking is only possible for the amount in ongoing inbound deliveries",
            "type": "string",
            "enum": [
              "possible",
              "not_possible",
              "only_inbound_deliveries"
            ]
          }
        },
        "type": "object"
      },
      "stockCollection": {
        "title": "stockCollection",
        "description": "A collection of stocks",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stock"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "productUnit": {
        "title": "productUnit",
        "description": "Data to represent a productUnit",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "description": "Code of the product unit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "productUnitCollection": {
        "title": "productUnitCollection",
        "description": "A collection of product units",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/productUnit"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "orderCollection": {
        "title": "orderCollection",
        "description": "A collection of shop orders",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/order"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "baseOrder": {
        "title": "baseOrder",
        "description": "Data to represent an order",
        "required": [
          "customer",
          "orderItems"
        ],
        "properties": {
          "shopCode": {
            "description": "The shopCode used internally to distinguish between clients.",
            "type": "string",
            "nullable": true
          },
          "customer": {
            "$ref": "#/components/schemas/baseOrderCustomer"
          },
          "orderItems": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderItem"
            }
          },
          "externalOrderId": {
            "description": "The external order ID e.g. from third party apps. This field does not have to be unique.\nIt can be used to link and refind multiple orders, for example, if there are multiple fulfilment orders possible for a single customer order.",
            "type": "string",
            "nullable": true
          },
          "externalOrderReference": {
            "description": "A not unique reference for the order which can be used for identifiying a specific order or for mapping to a third party app.",
            "type": "string",
            "nullable": true
          },
          "deliverySlipNotes": {
            "description": "Notes for the delivery slip.",
            "type": "string",
            "maxLength": 65535,
            "nullable": true
          },
          "orderNotes": {
            "description": "Order notes regarding the fulfillment",
            "type": "string",
            "maxLength": 500,
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/baseOrderOptions"
          }
        },
        "type": "object"
      },
      "newOrder": {
        "title": "newOrder",
        "description": "Data to create a new order",
        "required": [
          "customer",
          "orderItems"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrder"
          },
          {
            "properties": {
              "customer": {
                "$ref": "#/components/schemas/newOrderCustomer"
              },
              "orderItems": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/newOrderItem"
                },
                "maxItems": 1000
              },
              "options": {
                "$ref": "#/components/schemas/newOrderOptions"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseOrderOptions": {
        "title": "baseOrderOptions",
        "description": "Additional optional options for the order.",
        "nullable": true
      },
      "newOrderOptions": {
        "title": "newOrderOptions",
        "description": "Additional optional options for a new order.",
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrderOptions"
          },
          {
            "properties": {
              "autoProcessState": {
                "description": "By setting this option, the order will be processed into the defined state.\\\nThis option is NOT available in the production systems.\\\nThe autoprocessing of the state happens after the order has been sucessfully created.\nIn case of any errors during the autoprocessing of the state, error messages are shown but the order will still have been created and will not be rolled back.\n\nAvailable states:\n- order_completed_single_delivery: The order is completely delivered within one delivery.\\\nNote that it might not be possible to create a single delivery for the whole order, for example because of weight restrictions. In those cases multiple deliveries will be created.\n- order_completed_multiple_deliveries: The order is completely delivered and includes several deliveries.\n- order_partially_delivered: The order is in progress and one of several deliveries is delivered.\n- order_canceled: The order is canceled.\n- order_locked: The order is locked.\n",
                "type": "string",
                "enum": [
                  "order_completed_single_delivery",
                  "order_completed_multiple_deliveries",
                  "order_partially_delivered",
                  "order_canceled",
                  "order_locked"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "order": {
        "title": "order",
        "description": "Data to represent an order",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrder"
          },
          {
            "properties": {
              "orderNumber": {
                "description": "The order number. Note: This can be null if the order as not created via the API.",
                "type": "string",
                "nullable": true
              },
              "orderItems": {
                "description": "Note: canceled orderItems are NOT included.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/orderItem"
                }
              },
              "customer": {
                "$ref": "#/components/schemas/orderCustomer"
              },
              "status": {
                "description": "The current status of the order.\n- new: The order was created but not every required information was given. The order can not be processed without manual intervention.\n- processing: The order is being processed. For split deliveries, some of the shipments might have already been transferred to the delivery agent.\n- delivered: The orders shipments have all been transferred to the delivery agent.\n- deleted: The order has been cancelled.\n- locked: The order is locked. The order can not be processed without manual intervention.\n- examination: The order has been manually locked.  The order can not be processed without manual intervention.\n",
                "type": "string",
                "enum": [
                  "new",
                  "processing",
                  "delivered",
                  "deleted",
                  "locked",
                  "examination"
                ]
              },
              "orderDate": {
                "description": "The create date for the order. Default is the current date. Format in ISO 8601",
                "type": "string",
                "format": "date-time",
                "example": "2020-04-24T12:27:00+02:00"
              },
              "delivery": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/orderDelivery"
                },
                "nullable": true
              },
              "payment": {
                "$ref": "#/components/schemas/orderPayment"
              },
              "shipping": {
                "$ref": "#/components/schemas/orderShipping"
              }
            },
            "type": "object"
          }
        ]
      },
      "orderItem": {
        "title": "orderItem",
        "required": [
          "productNumber",
          "count"
        ],
        "properties": {
          "productNumber": {
            "description": "",
            "type": "string"
          },
          "title": {
            "description": "Item title (optional)",
            "type": "string",
            "nullable": true
          },
          "count": {
            "description": "Positive number of items to order",
            "type": "integer",
            "format": "int32"
          },
          "externalProductNumber": {
            "description": "Product number of the customer",
            "type": "string",
            "format": "int32",
            "nullable": true
          },
          "price": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/orderItemPrice"
              }
            ]
          },
          "options": {
            "description": "Additional options (optional, TBD)",
            "type": "object",
            "nullable": true
          }
        },
        "type": "object"
      },
      "newOrderItem": {
        "title": "newOrderItem",
        "allOf": [
          {
            "$ref": "#/components/schemas/orderItem"
          }
        ]
      },
      "orderItemPrice": {
        "title": "orderItemPrice",
        "required": [
          "value",
          "type",
          "vat",
          "currencyCode"
        ],
        "properties": {
          "value": {
            "description": "The price value rounded to 2 decimals, dot as separator",
            "type": "number",
            "format": "float",
            "example": "10.99"
          },
          "type": {
            "description": "The price type",
            "type": "string",
            "enum": [
              "net",
              "gross"
            ],
            "example": "gross"
          },
          "vat": {
            "description": "The VAT in percent",
            "type": "number",
            "format": "float",
            "example": "20"
          },
          "currencyCode": {
            "description": "The currency code (ISO 4217)",
            "type": "string",
            "example": "EUR"
          }
        },
        "type": "object"
      },
      "baseOrderCustomer": {
        "title": "baseOrderCustomer",
        "required": [
          "gender",
          "languageCode",
          "deliveryAddress"
        ],
        "properties": {
          "gender": {
            "description": "",
            "type": "string",
            "enum": [
              "male",
              "female",
              "unknown"
            ]
          },
          "languageCode": {
            "description": "The language code for any customer communications (ISO 639-1). Currently only 'de' is supported",
            "type": "string"
          },
          "externalCustomerId": {
            "description": "The external id of the order customer.",
            "type": "string",
            "nullable": true
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/orderCustomerDeliveryAddress"
          },
          "phone": {
            "description": "The customer's phone number, preferably in the DIN 5008 format, like:+43 2236 123456-7890",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object"
      },
      "newOrderCustomer": {
        "title": "newOrderCustomer",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrderCustomer"
          }
        ]
      },
      "orderCustomer": {
        "title": "orderCustomer",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseOrderCustomer"
          },
          {
            "properties": {
              "number": {
                "description": "",
                "type": "string",
                "nullable": true
              },
              "type": {
                "description": "The customer type",
                "type": "string",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "orderCustomerAddress": {
        "title": "orderCustomerAddress",
        "required": [
          "street",
          "streetNumber",
          "zipCode",
          "city",
          "countryCode"
        ],
        "properties": {
          "street": {
            "description": "",
            "type": "string"
          },
          "streetNumber": {
            "description": "",
            "type": "string"
          },
          "zipCode": {
            "description": "",
            "type": "string"
          },
          "district": {
            "description": "",
            "type": "string",
            "nullable": true
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "provinceCode": {
            "description": "Province code (ISO 3166-2)",
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "description": "Country code (ISO 3166-1 alpha-2)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "orderCustomerDeliveryAddress": {
        "title": "orderCustomerDeliveryAddress",
        "allOf": [
          {
            "$ref": "#/components/schemas/orderCustomerAddress"
          },
          {
            "required": [
              "nameLine1"
            ],
            "properties": {
              "nameLine1": {
                "description": "",
                "type": "string"
              },
              "nameLine2": {
                "description": "",
                "type": "string",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "orderCustomerInvoiceAddress": {
        "title": "orderCustomerInvoiceAddress",
        "allOf": [
          {
            "$ref": "#/components/schemas/orderCustomerAddress"
          }
        ]
      },
      "orderPayment": {
        "title": "orderPayment",
        "description": "Options regarding the payment of the order",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The payment method",
            "type": "string",
            "enum": [
              "invoice"
            ]
          }
        },
        "type": "object"
      },
      "orderShipping": {
        "title": "orderShipping",
        "description": "Options regarding the shipping of the order",
        "required": [
          "deliveryService"
        ],
        "properties": {
          "deliveryService": {
            "description": "The delivery service to recommend for usage.\nThe codes of supported delivery services can be retrieved from the 'GET /delivery-service' endpoint.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "orderDelivery": {
        "title": "orderDelivery",
        "description": "The delivery for the order. Details can be read by GET /delivery/.",
        "properties": {
          "number": {
            "description": "",
            "type": "string"
          },
          "status": {
            "description": "Status code of the delivery",
            "type": "string"
          }
        },
        "type": "object"
      },
      "manufacturer": {
        "title": "manufacturer",
        "description": "Data to represent a manufacturer",
        "allOf": [
          {
            "properties": {
              "manufacturerNumber": {
                "description": "Number of the manufacturer",
                "type": "string"
              },
              "name": {
                "description": "Manufacturer name",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "manufacturerCollection": {
        "title": "manufacturerCollection",
        "description": "A collection of manufacturers",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/manufacturer"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "deliveryShipment": {
        "description": "A shipments defines a single delivered entity (package, parcel, pallet, ...)",
        "properties": {
          "number": {
            "description": "The shipment number",
            "type": "string"
          },
          "status": {
            "description": "Status of the delivery.\n- in_progress: The delivery is in the process of being packaged.\n- delivered: The delivery has been transferred to the delivery agent.",
            "type": "string",
            "enum": [
              "in_progress",
              "delivered"
            ]
          },
          "deliveryService": {
            "description": "The delivery service used to send this delivery.\nThe codes of supported delivery services can be retrieved from the 'GET /delivery-service' endpoint.",
            "type": "string",
            "nullable": true
          },
          "code": {
            "description": "Carrier specific tracking code",
            "type": "string"
          },
          "link": {
            "description": "Link to the carrier's tracking site",
            "type": "string"
          },
          "weight": {
            "description": "Weight",
            "type": "number",
            "format": "float"
          },
          "weightUnit": {
            "description": "Weight unit",
            "type": "string"
          },
          "shipmentLines": {
            "description": "Shipment lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/shipmentLine"
            }
          },
          "externalShipmentId": {
            "description": "External id of the shipment",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object"
      },
      "shipmentLine": {
        "description": "One piece of content in a shipment",
        "properties": {
          "productNumber": {
            "description": "product number",
            "type": "string"
          },
          "count": {
            "description": "Number of items contained in the delivery",
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "description": "product unit",
            "type": "string",
            "nullable": true
          },
          "serialNumbers": {
            "description": "serial numbers",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "updateDeliveryShipment": {
        "description": "Fields to update a shipment",
        "required": [
          "externalShipmentId"
        ],
        "properties": {
          "externalShipmentId": {
            "description": "The external id of the shipment",
            "type": "string"
          }
        },
        "type": "object"
      },
      "delivery": {
        "description": "A delivery of the order",
        "properties": {
          "number": {
            "description": "The delivery number",
            "type": "string"
          },
          "orderNumber": {
            "description": "The order number. Note: This can be null if the delivery has no associated order.",
            "type": "string",
            "nullable": true
          },
          "status": {
            "description": "Status of the delivery.\n- in_progress: The delivery is in the process of being packaged.\n- delivered: The delivery has been transferred to the delivery agent.",
            "type": "string",
            "enum": [
              "in_progress",
              "delivered"
            ]
          },
          "shipments": {
            "description": "List of shipments (= package, parcel, pallet, ...)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deliveryShipment"
            }
          }
        },
        "type": "object"
      },
      "deliveryCollection": {
        "title": "deliveryCollection",
        "description": "A collection of deliveries",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/delivery"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "supplierCollection": {
        "title": "supplierCollection",
        "description": "A collection of suppliers",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "supplier": {
        "title": "supplier",
        "description": "Data to represent a supplier",
        "required": [
          "supplierNumber",
          "name"
        ],
        "properties": {
          "supplierNumber": {
            "description": "",
            "type": "string"
          },
          "name": {
            "description": "Supplier name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "shop": {
        "description": "Data to represent a shop",
        "properties": {
          "id": {
            "description": "Id",
            "type": "string"
          },
          "shopCode": {
            "description": "The shopCode used internally to distinguish between clients",
            "type": "string"
          },
          "internalReferencePrefix": {
            "description": "The prefix to the references internally to distinguish between clients.",
            "type": "string"
          },
          "email": {
            "description": "The email used internally.",
            "type": "string"
          },
          "meta": {
            "description": "Meta data of the shop.",
            "properties": {
              "shopifyShopDomain": {
                "description": "Domain of the Shopify shop.",
                "type": "string",
                "nullable": true
              },
              "testShop": {
                "description": "Flag to mark a shop used for testing.",
                "type": "boolean",
                "default": false,
                "nullable": true
              },
              "testShopResetNotBefore": {
                "description": "Date time to indicate that the test shop will not be reset before this time.",
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "sandboxMode": {
                "description": "Flag to mark a shop in sandbox mode.",
                "type": "boolean",
                "default": false,
                "nullable": true
              },
              "addTestSuffixToInternalReference": {
                "description": "Flag to mark if a test suffix should be added to internal references.",
                "type": "boolean",
                "default": false,
                "nullable": true
              }
            },
            "type": "object",
            "nullable": true,
            "additionalProperties": true
          }
        },
        "type": "object"
      },
      "updateShop": {
        "description": "Fields to update a shop",
        "properties": {
          "meta": {
            "description": "Meta data of the shop.",
            "properties": {
              "shopifyShopDomain": {
                "description": "Domain of the Shopify shop.",
                "type": "string",
                "nullable": true
              },
              "testShopResetNotBefore": {
                "description": "Date time to indicate that the test shop will not be reset before this time.",
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "sandboxMode": {
                "description": "Flag to mark a shop in sandbox mode.",
                "type": "boolean",
                "default": false,
                "nullable": true
              },
              "addTestSuffixToInternalReference": {
                "description": "Flag to mark if a test suffix should be added to internal references.",
                "type": "boolean",
                "default": false,
                "nullable": true
              }
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object"
      },
      "shopCollection": {
        "title": "shopCollection",
        "description": "A collection of shops",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/shop"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "deliveryService": {
        "title": "deliveryService",
        "description": "Data to represent a delivery service",
        "properties": {
          "code": {
            "description": "Code of the delivery service",
            "type": "string"
          },
          "name": {
            "description": "Name of the delivery service",
            "type": "string"
          }
        },
        "type": "object"
      },
      "deliveryServiceCollection": {
        "title": "deliveryServiceCollection",
        "description": "A collection of delivery services",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/deliveryService"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "reportClearingOrderCollection": {
        "title": "reportClearingOrderCollection",
        "description": "A collection of orders for clearing",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/reportClearingOrder"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "reportClearingOrder": {
        "description": "An order for clearing",
        "properties": {
          "orderNumber": {
            "description": "The order number. Note: This can be null if the order was not created via the API.",
            "type": "string"
          },
          "shopOrderId": {
            "description": "The API internal id of the order.",
            "type": "integer",
            "format": "int32"
          },
          "deliveryZipCode": {
            "description": "",
            "type": "string"
          },
          "deliveryCountryCode": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "country": {
        "description": "Data to represent a country, steve can ship to",
        "properties": {
          "countryCode": {
            "description": "Country code (ISO 3166-1 alpha-2)",
            "type": "string"
          },
          "name": {
            "description": "Country name",
            "type": "string"
          },
          "phoneRequired": {
            "description": "Specifies whether or not a phone number is required when using a shipping address in the country",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "countryCollection": {
        "title": "countryCollection",
        "description": "A collection of countries",
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "description": "",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/country"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "authRoleIdentityResource": {
        "required": [
          "roleCode",
          "identityId"
        ],
        "properties": {
          "roleCode": {
            "description": "Role Code",
            "type": "string"
          },
          "identityId": {
            "description": "Identity ID",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authRoleIdentityCollection": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authRoleIdentityResource"
        }
      },
      "authRoleResource": {
        "required": [
          "roleCode",
          "name"
        ],
        "properties": {
          "roleCode": {
            "description": "Role Code",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authRoleCollection": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authRoleResource"
        }
      },
      "getAuthPermissionCollectionResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authPermissionResource"
        }
      },
      "authPermissionResource": {
        "required": [
          "permissionCode",
          "name"
        ],
        "properties": {
          "permissionCode": {
            "description": "Permission Code",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "oAuthAuthorization": {
        "type": "oauth2",
        "description": "OAuth2 Authorization",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://authentication-api.conqore.niceshops.com/oauth/token",
            "refreshUrl": "UNDEFINED",
            "scopes": {}
          }
        }
      },
      "bearerAuth": {
        "type": "http",
        "description": "Bearer Token Authorization",
        "bearerFormat": "JWT",
        "scheme": "bearer"
      }
    }
  }
}