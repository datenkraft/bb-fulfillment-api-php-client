{
    "openapi": "3.0.0",
    "info": {
        "title": "Fulfillment API",
        "description": "\n- alpha: Currently developed API version. Subject to major changes.\n- beta: A semi-stable early access version. New features can be added. Breaking changes are possible.\n- stable: The API is recommended for use in production.\n\n[Changelog](https:\/\/fulfillment-api.conqore.niceshops.com\/v2\/docs\/changelog.html)\n\nAll data is transferred in UTF-8 encoding.\\\nThe API uses stateless HTTP. No cookies have to be kept.\\\nAuthentication via OAuth2 client credentials flow.\n\n[Privacy Policy](https:\/\/www.niceshops.com\/en\/dienstleistungen\/data-privacy-policy)\n\n[Fulfillment API PHP client @Packagist](https:\/\/packagist.org\/packages\/datenkraft\/bb-fulfillment-api-php-client)",
        "version": "v2.beta"
    },
    "servers": [
        {
            "url": "https://fulfillment-api.conqore.niceshops.com/v2",
            "description": "Production Server"
        }
    ],
    "paths": {
        "/audit-log": {
            "get": {
                "tags": [
                    "audit-log"
                ],
                "summary": "Get the audit log.",
                "description": "Get the audit log.",
                "operationId": "getAuditLogCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "filter[endpoint]",
                        "in": "query",
                        "description": "A filter for restricting the audit log to a endpoint.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[version]",
                        "in": "query",
                        "description": "A filter for restricting the audit log to a endpoint version.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[identifier]",
                        "in": "query",
                        "description": "A filter for querying actions for a identifier.",
                        "required": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/identifiers"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/auditLogCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/permission-role": {
            "get": {
                "tags": [
                    "auth-permission-role"
                ],
                "summary": "Get all role to permission assignments from this resource server",
                "description": "Get all role to permission assignments from this resource server",
                "operationId": "getAuthPermissionRoleCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authPermissionRolePaginatedCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "auth-permission-role"
                ],
                "summary": "Create one or more role to permission assignments in this resource server",
                "description": "Create one or more role to permission assignments in this resource server",
                "operationId": "postAuthPermissionRoleCollection",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/authPermissionRoleCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authPermissionRoleCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "auth-permission-role"
                ],
                "summary": "Delete one or more role to permission assignments in this resource server",
                "description": "Delete one or more role to permission assignments in this resource server",
                "operationId": "deleteAuthPermissionRoleCollection",
                "requestBody": {
                    "description": "CAUTION If the request is sent with an empty body, all relations are deleted!",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/authPermissionRoleCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/permission": {
            "get": {
                "tags": [
                    "auth-permission"
                ],
                "summary": "Get all permissions from this resource server",
                "description": "Get all permissions from this resource server",
                "operationId": "getAuthPermissionCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getAuthPermissionCollectionResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/role-identity": {
            "get": {
                "tags": [
                    "auth-role-identity"
                ],
                "summary": "Get all role to identity assignments from this resource server",
                "description": "Get all role to identity assignments from this resource server",
                "operationId": "getAuthRoleIdentityCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleIdentityPaginatedCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "auth-role-identity"
                ],
                "summary": "Create one or more role to identity assignments in this resource server",
                "description": "Create one or more role to identity assignments in this resource server",
                "operationId": "postAuthRoleIdentityCollection",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/authRoleIdentityCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleIdentityCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "auth-role-identity"
                ],
                "summary": "Delete one or more role to identity assignments in this resource server",
                "description": "Delete one or more role to identity assignments in this resource server",
                "operationId": "deleteAuthRoleIdentityCollection",
                "requestBody": {
                    "description": "CAUTION If the request is sent with an empty body, all relations are deleted!",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/authRoleIdentityCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/role": {
            "get": {
                "tags": [
                    "auth-role"
                ],
                "summary": "Get all available roles from this resource server",
                "description": "Get all available roles from this resource server",
                "operationId": "getAuthRoleCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/role/{roleCode}": {
            "get": {
                "tags": [
                    "auth-role"
                ],
                "summary": "Get a role from this resource server by its roleCode",
                "description": "Get a role from this resource server by its roleCode",
                "operationId": "getAuthRole",
                "parameters": [
                    {
                        "name": "roleCode",
                        "in": "path",
                        "description": "Identifier for the role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "auth-role"
                ],
                "summary": "Post a role for this resource server",
                "description": "Post a role for this resource server",
                "operationId": "postAuthRole",
                "parameters": [
                    {
                        "name": "roleCode",
                        "in": "path",
                        "description": "Identifier for the role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/newAuthRoleResource"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "auth-role"
                ],
                "summary": "Delete a role for this resource server",
                "description": "Delete a role for this resource server",
                "operationId": "deleteAuthRole",
                "parameters": [
                    {
                        "name": "roleCode",
                        "in": "path",
                        "description": "Identifier for the role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "auth-role"
                ],
                "summary": "Patch a role for this resource server",
                "description": "Patch a role for this resource server",
                "operationId": "patchAuthRole",
                "parameters": [
                    {
                        "name": "roleCode",
                        "in": "path",
                        "description": "Identifier for the role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/newAuthRoleResource"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authRoleResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/country": {
            "get": {
                "tags": [
                    "country"
                ],
                "summary": "Read a country collection of all countries available for shipments.",
                "description": "Collections are read in multiple pages with a defined page size.",
                "operationId": "getCountryCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/countryCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/delivery-service": {
            "get": {
                "tags": [
                    "delivery-service"
                ],
                "summary": "Get delivery services.",
                "description": "Get delivery services.",
                "operationId": "getDeliveryServiceCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deliveryServiceCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/delivery": {
            "get": {
                "tags": [
                    "delivery"
                ],
                "summary": "Get deliveries filtered by a single or multiple order numbers.",
                "description": "Get deliveries filtered by a single or multiple order numbers.",
                "operationId": "getDeliveryCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. \\\nThis can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    },
                    {
                        "name": "filter[orderNumber]",
                        "in": "query",
                        "description": "A filter for a single order number or multiple order numbers separated by a comma.\n- The filter can contain a maximum of 100 order numbers.\n- The order numbers in the filter must be unique.\n- A single order number can have a maximum length of 59 characters.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "single order number": {
                                "summary": "Order Number",
                                "value": "100123123"
                            },
                            "multiple order numbers": {
                                "summary": "Multiple Order Numbers",
                                "value": "100123123,100123124"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deliveryCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/delivery/{deliveryNumber}": {
            "get": {
                "tags": [
                    "delivery"
                ],
                "summary": "Get the delivery with the given deliveryNumber.",
                "description": "Get the delivery with the given deliveryNumber.",
                "operationId": "getDelivery",
                "parameters": [
                    {
                        "name": "deliveryNumber",
                        "in": "path",
                        "description": "Number of the delivery",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/delivery"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/delivery/{deliveryNumber}/document/{documentCode}": {
            "get": {
                "tags": [
                    "delivery"
                ],
                "summary": "Download delivery related documents",
                "description": "Allows to download a document associated with the given delivery.",
                "operationId": "getDeliveryDocument",
                "parameters": [
                    {
                        "name": "deliveryNumber",
                        "in": "path",
                        "description": "The number of the delivery",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 54
                        }
                    },
                    {
                        "name": "documentCode",
                        "in": "path",
                        "description": "The document type to download. The file format is determined by the Accept request header.\\\n**Note:** Only a limited amount of document type to file format combinations are available:\n- deliverySlipNote: The delivery slip note to confirm successful delivery.\\\nAccept header: application/pdf",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "deliverySlipNote"
                            ]
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the document with the file format according to the sent Accept request header.",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The requested document could not be generated in the format specified by the accept header",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/delivery/{deliveryNumber}/shipment/{shipmentNumber}": {
            "patch": {
                "tags": [
                    "delivery"
                ],
                "summary": "Patch data of the shipment of the delivery specified by the given delivery and shipment numbers.",
                "description": "Patch data of the shipment of the delivery specified by the given delivery and shipment numbers.",
                "operationId": "patchDeliveryShipment",
                "parameters": [
                    {
                        "name": "deliveryNumber",
                        "in": "path",
                        "description": "Number of the delivery.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "L41520000022100001"
                    },
                    {
                        "name": "shipmentNumber",
                        "in": "path",
                        "description": "Number of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "L41520000022100001"
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/updateDeliveryShipment"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deliveryShipment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict \\\nAvailable message codes:\n- SHIPMENT_WITH_STEVE_EXTERNAL_SHIPMENT_ID_ALREADY_EXISTS: Another shipment with the given \nshipmentId already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/docs": {
            "get": {
                "tags": [
                    "docs"
                ],
                "summary": "Get the openapi documentation as json",
                "description": "Get the openapi documentation as json",
                "operationId": "getOpenApi",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "security": []
            }
        },
        "/docs/changelog.{format}": {
            "get": {
                "tags": [
                    "docs"
                ],
                "summary": "Get the changelog in the specified format",
                "description": "Get the changelog in the specified format",
                "operationId": "getChangelogInFormat",
                "parameters": [
                    {
                        "name": "format",
                        "in": "path",
                        "description": "Changelog file format",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "md",
                                "html"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Changelog not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/docs/openapi.{format}": {
            "get": {
                "tags": [
                    "docs"
                ],
                "summary": "Get the openapi documentation in the specified format",
                "description": "Get the openapi documentation in the specified format",
                "operationId": "getOpenApiInFormat",
                "parameters": [
                    {
                        "name": "format",
                        "in": "path",
                        "description": "Openapi file format",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "yaml",
                                "json"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bulk-import/inbound-delivery": {
            "post": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Import one or more new inbound deliveries.",
                "description": "Import one or more new inbound deliveries.\n        The file type is controlled by the content type attribute of the uploaded file",
                "operationId": "inboundDeliveryBulkImport",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "description": "File to upload",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "207": {
                        "description": "Multi Status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "required": [
                                            "code",
                                            "message",
                                            "content",
                                            "reference"
                                        ],
                                        "properties": {
                                            "code": {
                                                "description": "HTTP Status code of the single request",
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "message": {
                                                "description": "Description for the HTTP Status code of the single request",
                                                "type": "string"
                                            },
                                            "reference": {
                                                "description": "Reference for the entry tried to post represented by a key-value pair.",
                                                "type": "object",
                                                "additionalProperties": {
                                                    "type": "string"
                                                }
                                            },
                                            "content": {
                                                "type": "object",
                                                "oneOf": [
                                                    {
                                                        "$ref": "#/components/schemas/inboundDelivery"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/errorResponse"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/bulk-import/template/inbound-delivery": {
            "get": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Get a spreadsheet template for performing POST queries to the respective endpoint.",
                "description": "Get a spreadsheet template for performing POST queries to the respective endpoint.\n        The file type is controlled by the accept header.\n        The fill-in help in the second line can be removed or remain.",
                "operationId": "getInboundDeliveryBulkImportTemplate",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The requested document could not be generated in the format specified by the accept header",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/inbound-delivery": {
            "get": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Get a list of inbound deliveries.",
                "description": "Get a list of inbound deliveries.",
                "operationId": "getInboundDeliveryCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort the results by one or more comma-separated sort criteria, with the criterion specified first having priority.\n\nAvailable sort orders:\n- asc: ascending order\n- desc: descending order\n\nAvailable fields for sorting:\n- expectedDeliveryDate\n\nThe default sort order is expectedDeliveryDate:desc.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "expectedDeliveryDate:asc"
                    },
                    {
                        "name": "filter[status]",
                        "in": "query",
                        "description": "Status of the inbound delivery (optional).\n\nThe status for not yet completed is subject to change. you may poll for changes.\n- open: The inbound delivery has not yet been delivered.\n- in_progress: The inbound delivery is being processed in our warehouse.\n- completed: The inbound delivery has been processed in our warehouse.\n- deleted: The inbound delivery has been deleted.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "single status": {
                                "summary": "single inbound delivery status",
                                "value": "in_progress"
                            },
                            "multiple status": {
                                "summary": "multiple inbound delivery status",
                                "value": "in_progress,open"
                            }
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    },
                    {
                        "name": "filter[expectedDeliveryDateFrom]",
                        "in": "query",
                        "description": "The start date (inclusive) in format Y-m-d for which inbound deliveries should be returned (regarding the expected delivery date).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "filter[expectedDeliveryDateTo]",
                        "in": "query",
                        "description": "The end date (inclusive) in format Y-m-d for which inbound deliveries should be returned (regarding the expected delivery date).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "filter[search]",
                        "in": "query",
                        "description": "filter for inbound delivery search.\\\n\\\nUsage:\n- Provide one or multiple search terms to filter results.\n- Multiple search terms are separated by spaces.\n- The search is not case sensitive.\n- The search is enabled for the fields inboundDeliveryName and inboundDeliveryNumber (without the numberPrefix of the associated supplier).\n- Each search term filters the response for inbound deliveries where at least one of the fields contains the search term.\n- For example, filter[search]='term1 term2' will filter the result for products where 'term1' is found in any field and 'term2' is also found in any field.\\\nIf only 'term1' or 'term2' is found in the fields, the product is not included in the results.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[createDateFrom]",
                        "in": "query",
                        "description": "The start date (inclusive) in ISO 8601 format for which inbound deliveries should be returned (regarding the creation date).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "filter[createDateTo]",
                        "in": "query",
                        "description": "The end date (inclusive) in ISO 8601 format for which inbound deliveries should be returned (regarding the creation date).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inboundDeliveryCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/inbound-delivery/{inboundDeliveryNumber}": {
            "get": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Get an inbound delivery by inbound delivery number.",
                "description": "Get an inbound delivery by inbound delivery number.",
                "operationId": "getInboundDelivery",
                "parameters": [
                    {
                        "name": "inboundDeliveryNumber",
                        "in": "path",
                        "description": "The inbound delivery number as defined during the creation of the inbound delivery.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inboundDelivery"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict\n\nAvailable message codes:\n- AMBIGUOUS_INBOUND_DELIVERY: Multiple inbound deliveries were found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Add a new inbound delivery.",
                "description": "Add a new inbound delivery referenced by the given deliveryNumber.",
                "operationId": "postInboundDelivery",
                "parameters": [
                    {
                        "name": "inboundDeliveryNumber",
                        "in": "path",
                        "description": "The number the inbound delivery should be refered by.\\\nThis number is user defined, must be unique and has a maximum length (check maxLength field).\\\nPlease ensure that it does not contain any of the following character sequences: '/', '%2F', '%2f', '?', '%3F', '%3f',\n'#', '%23', '&', '%26'. Using any of these will result in the route not being handled correctly.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/newInboundDelivery"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inboundDelivery"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity\n\nAvailable message codes:\n- SUPPLIER_NOT_FOUND: The supplier with the given supplierNumber could not be found.\n- PRODUCT_NOT_FOUND: The product with the given productNumber could not be found.\n- DUPLICATED_PRODUCT: There are multiple products with the same productNumber.\n- PRODUCT_COULD_NOT_BE_ADDED_FOR_SUPPLIER: At least one of the the given products could not be added for the supplier.\n- INBOUND_DELIVERY_NOTIFICATION_NOT_SENDABLE: Could not send the delivery notification to the supplier. The inbound\ndelivery has been deleted.\n- INBOUND_DELIVERY_NUMBER_STARTS_WITH_RESERVED_NUMBER_PREFIX: The inboundDeliveryNumber starts with a prefix that is\n  reserved for internal references.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/inbound-delivery/{inboundDeliveryNumber}/cancel": {
            "post": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Cancel a inbound delivery.",
                "description": "Cancel a inbound delivery referenced by the given inboundDeliveryNumber.\\\nAn inboundDeliveryNumber from a canceled inbound delivery cannot be used for a new inbound delivery, because they must\nalways be unique.",
                "operationId": "cancelInboundDelivery",
                "parameters": [
                    {
                        "name": "inboundDeliveryNumber",
                        "in": "path",
                        "description": "The number the inbound delivery should be refered by.\nThis number is user defined, must be unique and has a maximum length (check maxLength field).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inboundDelivery"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict\n\nAvailable message codes:\n- AMBIGUOUS_INBOUND_DELIVERY: Multiple inbound deliveries were found.\n- INBOUND_DELIVERY_ALREADY_CANCELED: The inbound delivery is already canceled.\n- INBOUND_DELIVERY_NOT_CANCELABLE: The inbound delivery could not be canceled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/inbound-delivery/{inboundDeliveryNumber}/document/{documentCode}": {
            "get": {
                "tags": [
                    "inbound-delivery"
                ],
                "summary": "Download inbound delivery related documents",
                "description": "Allows to download a document associated with the given inbound delivery.",
                "operationId": "getInboundDeliveryDocument",
                "parameters": [
                    {
                        "name": "inboundDeliveryNumber",
                        "in": "path",
                        "description": "The inbound delivery number as defined during the creation of the inbound delivery.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "documentCode",
                        "in": "path",
                        "description": "The document type to download. The file format is determined by the Accept request header.\\\nNote: only a limited amount of document type to file format combinations are available:\n- supplierDeliveryLabel:\\\nthe label to put on the inbound delivery for warehouse processing.\\\nAccept header: application/pdf\n- details:\\\na spreadsheet containing details about the inbound delivery.\\\nAccept header: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\n    ",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "supplierDeliveryLabel",
                                "details"
                            ]
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the document with the file format according to the sent Accept request header.",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The requested document could not be generated in\nthe format specified by the Accept request header.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/manufacturer": {
            "get": {
                "tags": [
                    "manufacturer"
                ],
                "summary": "Get a list of manufacturers.",
                "description": "Get a list of manufacturers.",
                "operationId": "getManufacturerCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/manufacturerCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/order": {
            "get": {
                "tags": [
                    "order"
                ],
                "summary": "Get a list of shop oders.",
                "description": "Get a list of shop orders.",
                "operationId": "getOrderCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort the results by one or more comma-separated sort criteria, with the criterion specified first having priority.\n\nAvailable sort orders:\n- asc: ascending order\n- desc: descending order\n\nAvailable fields for sorting:\n- orderDate\n\nThe default sort order is orderDate:desc.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "orderDate:asc"
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    },
                    {
                        "name": "filter[status]",
                        "in": "query",
                        "description": "Filter for status/statuses (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "single status": {
                                "summary": "single shop order status",
                                "value": "processing"
                            },
                            "multiple statuses": {
                                "summary": "multiple shop order statuses",
                                "value": "processing,canceled"
                            }
                        }
                    },
                    {
                        "name": "filter[externalOrderId]",
                        "in": "query",
                        "description": "Filter for the external order ID e.g. from third party apps (optional)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "SY_1042"
                    },
                    {
                        "name": "filter[externalCustomerId]",
                        "in": "query",
                        "description": "Filter for the external customer ID e.g. from third party apps (optional)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "564132551"
                    },
                    {
                        "name": "filter[externalOrderReference]",
                        "in": "query",
                        "description": "filter for externalOrderReference",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[orderDateFrom]",
                        "in": "query",
                        "description": "filter for orderDate format in ISO 8601 with UTC offsets",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2020-04-24T12:27:00+02:00"
                    },
                    {
                        "name": "filter[orderDateTo]",
                        "in": "query",
                        "description": "filter for orderDate format in ISO 8601 with UTC offsets",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2020-04-24T12:27:00+02:00"
                    },
                    {
                        "name": "filter[search]",
                        "in": "query",
                        "description": "filter for order search.\\\n\\\nUsage:\n- Provide one or multiple search terms to filter results.\n- Multiple search terms are separated by spaces.\n- The search is not case sensitive.\n- The search is enabled for the fields 'externalOrderReference', 'orderNumber' and the tracking code of the orders shipments.\n- Each search term filters the response for orders where at least one of the fields contains the search term.\n- For example, filter[search]='term1 term2' will filter the result for orders where 'term1' is found in any field and 'term2' is also found in any field.\\\nIf only 'term1' or 'term2' is found in the fields, the order is not included in the results.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/order/{orderNumber}": {
            "get": {
                "tags": [
                    "order"
                ],
                "summary": "Get an order by order number.",
                "description": "Get an order by order number.",
                "operationId": "getOrder",
                "parameters": [
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "The order number as defined during the creation of the order.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 54
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "order"
                ],
                "summary": "Add a new order.",
                "description": "Add a new order referenced by the given orderNumber.",
                "operationId": "postOrder",
                "parameters": [
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "The number the order should be refered by.\\\nThis number is user defined, must be unique and has a maximum length (check maxLength field).\\\nPlease ensure that it does not contain any of the following character sequences: '/', '%2F', '%2f', '?', '%3F', '%3f',\n'#', '%23', '&', '%26'. Using any of these will result in the route not being handled correctly.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 54
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/newOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity\n\nAvailable message codes:\n- PRODUCT_NOT_FOUND: A product could not be found.\n- DUPLICATED_PRODUCT: There are multiple orderItems with the same productNumber.\n- ORDER_CUSTOMS_CLEARANCE_REQUIRED_FIELD_MISSING: A field required for customs clearance is missing.\n- ORDER_NUMBER_STARTS_WITH_RESERVED_NUMBER_PREFIX: The orderNumber starts with a prefix that is reserved for internal\n  references.\n- ORDER_INVALID_CURRENCY_CODE: An invalid currencyCode was given for the delivery country.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/order/{orderNumber}/cancel": {
            "post": {
                "tags": [
                    "order"
                ],
                "summary": "Cancel an order.",
                "description": "Cancel the order specified by the given order number (set in param orderNumber).\\\nAn orderNumber from a canceled order cannot be used for a new order, because they must always be unique.",
                "operationId": "cancelOrder",
                "parameters": [
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "The number the order is refered by.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 54
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict\n\nAvailable message codes:\n- ORDER_NOT_CANCELABLE: The order could not be canceled anymore\n- ORDER_ALREADY_CANCELED: The order is already canceled\n- ORDER_CANCELLATION_ALREADY_EXISTS: An order cancellation request already exists, which needs manual approval",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/order/{orderNumber}/redact": {
            "post": {
                "tags": [
                    "order"
                ],
                "summary": "Redact an order.",
                "description": "Redact the order and all other orders linked to the given order number (set in the param\norderNumber) in a GDPR article 17 conform way. \\\n\nOnly orders with one of the following statuses are redactable:\n- delivered\n- deleted\n- canceled",
                "operationId": "redactOrder",
                "parameters": [
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "The number the order is refered by.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 54
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict\n\nAvailable message codes:\n- ORDER_NOT_REDACTABLE: The order is not redactable because of status conflicts\n- ORDER_ALREADY_REDACTED: The order is already redacted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/product-unit": {
            "get": {
                "tags": [
                    "product-unit"
                ],
                "summary": "Get all available product unit codes",
                "description": "Get all available product unit codes.",
                "operationId": "getProductUnitCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/productUnitCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/product": {
            "get": {
                "tags": [
                    "product"
                ],
                "summary": "Get a list of products.",
                "description": "Get a list of products.",
                "operationId": "getProductCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. \\\nThis can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    },
                    {
                        "name": "filter[search]",
                        "in": "query",
                        "description": "Filter for product search. \\\nUsage:\n- Provide one or multiple search terms to filter results. \n- Multiple search terms are separated by spaces.\n- The search is not case sensitive.\n- The search is enabled for the fields productTitle, productNumber and ean.\n- Each search term filters the response for products where at least one of the\nfields contains the search term.\n- For example, filter[search]='term1 term2' will filter the result for products where 'term1'\nis found in any field and 'term2' is also found in any field.\nIf only 'term1' or 'term2' is found in the fields, the product is not included in the results.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[source]",
                        "in": "query",
                        "description": "Filter for product source.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "self",
                                "nice",
                                "bundle"
                            ]
                        },
                        "example": "self"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/productCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/product/{productNumber}": {
            "get": {
                "tags": [
                    "product"
                ],
                "summary": "Get a product by product number.",
                "description": "Get a product by product number.",
                "operationId": "getProduct",
                "parameters": [
                    {
                        "name": "productNumber",
                        "in": "path",
                        "description": "The product number as defined during the creation of the product.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/product"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "product"
                ],
                "summary": "Add a new product",
                "description": "Add a new product referenced by the given productNumber. \\\n_Please note that due to necessary product compliance enabling by our steve team,\nthe product might not be usable immediately.\nThe product number is nevertheless reserved, even before the product can be queried in the GET endpoint._",
                "operationId": "postProduct",
                "parameters": [
                    {
                        "name": "productNumber",
                        "in": "path",
                        "description": "The number the product should be referred by. \\\nThis number is user defined, must be unique and has a maximum length (check maxLength field).\\\nPlease ensure that it does not contain any of the following character sequences:\n'/', '%2F', '%2f', '?', '%3F', '%3f', '#', '%23', '&', '%26'.\nUsing any of these will result in the route not being handled correctly.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/newProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/informationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/product/{productNumber}/journal": {
            "get": {
                "tags": [
                    "product"
                ],
                "summary": "Read a journal collection for a specific product showing the history of stock changes.",
                "description": "Read a journal collection for a specific product showing the history of stock changes.\n_Only products with the source 'self' can be queried._",
                "operationId": "getProductJournalCollection",
                "parameters": [
                    {
                        "name": "productNumber",
                        "in": "path",
                        "description": "The product number as defined during the creation of the product.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 250
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\\\n- default: The total number of items in the collection will not be calculated.\\\n- totalCount: The total number of items in the collection will be calculated.\nThis can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    },
                    {
                        "name": "filter[dateFrom]",
                        "in": "query",
                        "description": "The start date (inclusive) in format Y-m-d (timezone CET/CEST) for which product journal entries should be returned.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "filter[dateTo]",
                        "in": "query",
                        "description": "The end date (inclusive) in format Y-m-d (timezone CET/CEST) for which product journal entries should be returned.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "filter[reason]",
                        "in": "query",
                        "description": "Filter journal entries for one or more reasons\n- expired: Taking an expired product off the books\n- damaged: Taking a damaged product off the books\n- own_withdrawl: Product taken for own use\n- correction: Manual correction\n- niceshops_order: Product sold via a shop from niceshops\n- inbound: Restocking the product\n- fulfillment: steve fulfilled an order\n- return: A customer sent the product back to our warehouse",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "single reason": {
                                "summary": "Product Journal Reason",
                                "value": "fulfillment"
                            },
                            "multiple reasons": {
                                "summary": "Multiple Product Journal Reasons",
                                "value": "fulfillment,return,niceshops_order"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/productJournalCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/reconsignment": {
            "get": {
                "tags": [
                    "reconsignment"
                ],
                "summary": "Read the reconsignments in the given dateRange.",
                "description": "Read the reconsignments in the given dateRange.",
                "operationId": "getReconsignmentCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "'default': Total count will not be calculated. 'totalCount': The total number of entries for the request will be calculated. This can mean loss of performance. If not given, 'default' pagination mode is used.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort the results by one or more comma-separated sort criteria, with the criterion specified first having priority.\n\nAvailable sort orders:\n- asc: ascending order\n- desc: descending order\n\nAvailable fields for sorting:\n- reconsignmentDate\n\nThe default sort order is reconsignmentDate:desc.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "reconsignmentDate:asc"
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shop to which the reconsignments belongs to.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[orderNumber]",
                        "in": "query",
                        "description": "The order number which the reconsignments belong to.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[reconsignmentDateFrom]",
                        "in": "query",
                        "description": "filter for reconsignmentDate format in ISO 8601 with UTC offsets",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2020-04-24T12:27:00+02:00"
                    },
                    {
                        "name": "filter[reconsignmentDateTo]",
                        "in": "query",
                        "description": "filter for reconsignmentDate format in ISO 8601 with UTC offsets",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2020-04-24T12:27:00+02:00"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reconsignmentCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/reconsignment/{reconsignmentNumber}": {
            "get": {
                "tags": [
                    "reconsignment"
                ],
                "summary": "Read the reconsignment specified by the given reconsignment number (set in param reconsignmentNumber).",
                "description": "Read the reconsignment specified by the given reconsignment number (set in param reconsignmentNumber).",
                "operationId": "getReconsignment",
                "parameters": [
                    {
                        "name": "reconsignmentNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "shopCode",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reconsignment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/report/clearing/orders": {
            "get": {
                "tags": [
                    "report"
                ],
                "summary": "Read the created orders for the given shopCode in the given dateRange.",
                "description": "Read the created orders for the given shopCode in the given dateRange.",
                "operationId": "getOrderReportClearingCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. \\\nThis can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    },
                    {
                        "name": "filter[dateFrom]",
                        "in": "query",
                        "description": "The start date (inclusive) in format Y-m-d (timezone CET/CEST) for which orders should be returned.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "filter[dateTo]",
                        "in": "query",
                        "description": "The end date (inclusive) in format Y-m-d (timezone CET/CEST) for which orders should be returned.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reportClearingOrderCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/report/inventory-movements": {
            "get": {
                "tags": [
                    "report"
                ],
                "summary": "Read the inventory movements for the given shopCode in the given month and year.",
                "description": "Read the inventory movements for the given shopCode in the given month and year.",
                "operationId": "getReportInventoryMovementCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. \\\nThis can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients. \\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    },
                    {
                        "name": "filter[year]",
                        "in": "query",
                        "description": "The year for which inventory movements should be returned.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2023
                    },
                    {
                        "name": "filter[month]",
                        "in": "query",
                        "description": "The month for which inventory movements should be returned.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 7
                    },
                    {
                        "name": "filter[productNumbers]",
                        "in": "query",
                        "description": "The productNumber(s) as comma delimited string for which inventory movements should be returned (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "single product number": {
                                "summary": "Product Number",
                                "value": "productNumber1"
                            },
                            "multiple product numbers": {
                                "summary": "Multiple Product Numbers",
                                "value": "productNumber1,productNumber2"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reportInventoryMovementEntryCollection"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No (more) inventory movements could be found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/shop": {
            "get": {
                "tags": [
                    "shop"
                ],
                "summary": "Get a list of shops the used identity is assigned to.",
                "description": "Get a list of shops the used identity is assigned to.",
                "operationId": "getShopCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "filter[meta][shopifyShopDomain]",
                        "in": "query",
                        "description": "A filter for the Shopify hostname of the shop.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[meta][shopifyDefaultShop]",
                        "in": "query",
                        "description": "A filter for Shopify default shops.\\\nNote: For shops that are part of a Shopify installation that uses multiple shops,\n only shops where meta.shopifyShopDefault is true will be considered as default shops.\\\nAll shops that are used for a single shop Shopify installation will also be considered as default shops.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "filter[meta][shopifyOrderCountryCode]",
                        "in": "query",
                        "description": "A filter for the Shopify order country code (ISO 3166-1 alpha-2).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "AT": {
                                "summary": "Austria",
                                "value": "AT"
                            }
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "A filter for one or more shopCode(s) of the shop(s) (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "single shopCode": {
                                "summary": "single shopCode",
                                "value": "teststeve"
                            },
                            "multiple shopCodes": {
                                "summary": "multiple shopCodes",
                                "value": "teststeve,niceshops"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shopCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/shop/{shopId}": {
            "patch": {
                "tags": [
                    "shop"
                ],
                "summary": "Update a shop",
                "description": "Update one or more fields of a shop. Only a limited set of fields can be updated.",
                "operationId": "patchShop",
                "parameters": [
                    {
                        "name": "shopId",
                        "in": "path",
                        "description": "Shop Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/updateShop"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shop"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/stock": {
            "get": {
                "tags": [
                    "stock"
                ],
                "summary": "Get the stock for all (per default only valid) products or for a specific product.",
                "description": "Get the stock for all (per default only valid) products or for a specific product.",
                "operationId": "getStockCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "filter[productNumber]",
                        "in": "query",
                        "description": "Filter for product number(s) (optional).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "single product number": {
                                "summary": "single product number",
                                "value": "test-1"
                            },
                            "multiple product numbers": {
                                "summary": "multiple product numbers",
                                "value": "test-1,test-2,test-3"
                            }
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    },
                    {
                        "name": "filter[productStatus]",
                        "in": "query",
                        "description": "filter for productStatus\\\nBy default, only valid products (available or in stock) are returned.\\\nUse '_all' to return all products (also invalid products)\\\nUse '_invalid' to specifically return invalid products (not available and out of stock)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "_all",
                                "_invalid"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/stockCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/supplier": {
            "get": {
                "tags": [
                    "supplier"
                ],
                "summary": "Get suppliers filtered by shopCode.",
                "description": "Get suppliers filtered by shopCode.",
                "operationId": "getSupplierCollection",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page to read. Default is the first page.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The maximum size per page is 100. Default is 20.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "paginationMode",
                        "in": "query",
                        "description": "The paginationMode to use:\n- default: The total number of items in the collection will not be calculated.\n- totalCount: The total number of items in the collection will be calculated. This can mean loss of performance.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "default",
                                "totalCount"
                            ]
                        }
                    },
                    {
                        "name": "filter[shopCode]",
                        "in": "query",
                        "description": "The shopCode used internally to distinguish between clients.\\\n_This code is optional, if your identity is assigned to only one shop.\nOtherwise the response would be a 422 HTTP Error._",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "teststeve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/supplierCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oAuthAuthorization": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "auditLog": {
                "description": "Data to represent a audit log entry.",
                "properties": {
                    "id": {
                        "description": "Id",
                        "type": "string"
                    },
                    "endpoint": {
                        "description": "The name of the audited endpoint.",
                        "type": "string"
                    },
                    "version": {
                        "description": "The version of the audited endpoint.",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "The identifier of the resource.",
                        "type": "string"
                    },
                    "content": {
                        "description": "The content of the resource.",
                        "type": "string",
                        "nullable": true
                    },
                    "confidentialContent": {
                        "description": "The GDPR relevant content of the resource.",
                        "type": "string",
                        "nullable": true
                    },
                    "requestId": {
                        "description": "The optional request ID of the endpoint call.",
                        "type": "string",
                        "nullable": true
                    },
                    "oauthClientId": {
                        "description": "The OAuth client id which did the change.",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The timestamp of the action.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "auditLogCollection": {
                "title": "auditLogCollection",
                "description": "A collection of audit log entries",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/auditLog"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "authPermissionResource": {
                "required": [
                    "permissionCode",
                    "name"
                ],
                "properties": {
                    "permissionCode": {
                        "description": "Permission Code",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "authPermissionRoleCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/authPermissionRoleResource"
                }
            },
            "authPermissionRolePaginatedCollection": {
                "title": "authPermissionRolePaginatedCollection",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/authPermissionRoleResource"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "authPermissionRoleResource": {
                "required": [
                    "roleCode",
                    "permissionCode"
                ],
                "properties": {
                    "permissionCode": {
                        "description": "Permission Code",
                        "type": "string"
                    },
                    "roleCode": {
                        "description": "Role Code",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "authRoleCollection": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/authRoleResource"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "authRoleIdentityCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/authRoleIdentityResource"
                }
            },
            "authRoleIdentityPaginatedCollection": {
                "title": "authRoleIdentityPaginatedCollection",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/authRoleIdentityResource"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "authRoleIdentityResource": {
                "required": [
                    "roleCode",
                    "identityId"
                ],
                "properties": {
                    "roleCode": {
                        "description": "Role Code",
                        "type": "string"
                    },
                    "identityId": {
                        "description": "Identity ID",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "authRoleResource": {
                "required": [
                    "roleCode",
                    "name"
                ],
                "properties": {
                    "roleCode": {
                        "description": "Role Code",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "baseOrder": {
                "title": "baseOrder",
                "description": "Data to represent an order",
                "required": [
                    "customer",
                    "orderItems"
                ],
                "properties": {
                    "shopCode": {
                        "description": "The shopCode used internally to distinguish between clients.",
                        "type": "string",
                        "nullable": true
                    },
                    "customer": {
                        "$ref": "#/components/schemas/baseOrderCustomer"
                    },
                    "orderItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/newOrderItem"
                        }
                    },
                    "externalOrderId": {
                        "description": "A not unique reference for the order which can be used for identifying a specific order or for\nmapping to a third party app.",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "deliverySlipNotes": {
                        "description": "Notes to be printed on the delivery slip.",
                        "type": "string",
                        "maxLength": 500,
                        "nullable": true
                    },
                    "externalOrderReference": {
                        "description": "External reference for the order",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "orderNotes": {
                        "description": "Notes for the steve team regarding the fulfillment.",
                        "type": "string",
                        "maxLength": 500,
                        "nullable": true
                    },
                    "amazonOrderId": {
                        "description": "The amazon order id.",
                        "type": "string",
                        "maxLength": 500,
                        "nullable": true
                    },
                    "deliveryCosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/orderDeliveryCosts"
                        },
                        "nullable": true
                    },
                    "options": {
                        "$ref": "#/components/schemas/baseOrderOptions"
                    }
                },
                "type": "object"
            },
            "baseOrderCustomer": {
                "title": "baseOrderCustomer",
                "required": [
                    "gender",
                    "languageCode",
                    "deliveryAddress"
                ],
                "properties": {
                    "gender": {
                        "type": "string",
                        "enum": [
                            "male",
                            "female",
                            "unknown"
                        ]
                    },
                    "languageCode": {
                        "description": "The language code for any customer communications (ISO 639-1). Currently only 'de' is supported",
                        "type": "string",
                        "example": "de"
                    },
                    "externalCustomerId": {
                        "description": "The external id of the order customer",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/orderCustomerDeliveryAddress"
                    },
                    "email": {
                        "description": "The customer's email",
                        "type": "string",
                        "nullable": true
                    },
                    "phone": {
                        "description": "The customer's phone number, preferably in the DIN 5008 format, like: +43 2236 123456-7890",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true
                    },
                    "firstname": {
                        "description": "The customer's first name.\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.",
                        "type": "string",
                        "maxLength": 40,
                        "nullable": true
                    },
                    "lastname": {
                        "description": "The customer's last name.\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.",
                        "type": "string",
                        "maxLength": 40,
                        "nullable": true
                    },
                    "title": {
                        "description": "The customer's title.\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.",
                        "type": "string",
                        "maxLength": 100,
                        "nullable": true
                    },
                    "company": {
                        "description": "The customer's company name.\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true
                    },
                    "companyVatNumber": {
                        "description": "The customer's company vat number (might be validated).\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.",
                        "type": "string",
                        "nullable": true
                    },
                    "invoiceAddress": {
                        "description": "The customer's invoice address.\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.",
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/orderCustomerAddress"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "baseOrderOptions": {
                "title": "baseOrderOptions",
                "description": "Additional optional options for the order.",
                "nullable": true
            },
            "baseProduct": {
                "title": "baseProduct",
                "description": "Data to represent a product",
                "properties": {
                    "productType": {
                        "description": "Type of the product",
                        "type": "string",
                        "default": "standard",
                        "enum": [
                            "standard",
                            "sample",
                            "sellable_sample",
                            "tester",
                            "packaging_material",
                            "booking_seminar",
                            "booking_appointment",
                            "promo_material",
                            "raw_material",
                            "working_material",
                            "service_principal",
                            "service_ancillary",
                            "inquiry_testdrive",
                            "inquiry_raffle",
                            "chilled_product",
                            "limited_edition",
                            "voucher_print",
                            "voucher_digital",
                            "bundle",
                            "print_greetingcard",
                            "personalized",
                            "other_services"
                        ]
                    },
                    "articleVariantTitle": {
                        "description": "The title of the article variant. \\\nMust not be set when the articleVariantType is 'standard_autotitle'.",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "articleVariantType": {
                        "description": "The type of the article variant. \\\nThe articleVariantType 'standard_autotitle' is only allowed for the variantGroup 'content'",
                        "type": "string",
                        "default": "standard_autotitle",
                        "enum": [
                            "standard",
                            "standard_autotitle",
                            "personalized",
                            "booking_appointment",
                            "booking_seminar",
                            "bundle",
                            "bundle_changeable",
                            "bundle_configurable",
                            "generic",
                            "inquiry_raffle",
                            "inquiry_testdrive",
                            "other_services",
                            "print_greetingcard",
                            "service_ancillary",
                            "service_principal",
                            "voucher_digital",
                            "voucher_print",
                            null
                        ],
                        "nullable": true
                    },
                    "articleStatus": {
                        "description": "Status of the article regarding visibility ('active' if no value is provided)",
                        "type": "string",
                        "default": "active",
                        "enum": [
                            "active",
                            "temporary_inactive",
                            "preparation_inactive",
                            "inactive_but_visible",
                            "inactive",
                            null
                        ],
                        "nullable": true
                    },
                    "contentsAmount": {
                        "description": "Amount of the product contents (1 if no value is provided)",
                        "type": "number",
                        "format": "float",
                        "default": 1,
                        "nullable": true
                    },
                    "contentsUnit": {
                        "description": "Unit of the product contents ('stk' if no value is provided).\\\nValid units can be queried with a GET /product-unit call",
                        "type": "string",
                        "default": "stk",
                        "nullable": true
                    },
                    "contentsWeightGram": {
                        "description": "Weight of the product contents in gram",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "weightGram": {
                        "description": "Total weight of the product in gram",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "variantGroup": {
                        "description": "The variant group of the product",
                        "default": "content",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/variantGroupEnum"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "ean": {
                        "description": "The EAN of the product",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "suggestedRetailPriceEUR": {
                        "description": "The suggested retail price for the product in EUR",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "purchasePrices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/productPurchasePrice"
                        },
                        "nullable": true
                    },
                    "productNumberManufacturer": {
                        "description": "Product number of the manufacturer",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "manufacturerCountryCode": {
                        "description": "Country code of the manufacturer (ISO 3166-1 alpha-2)",
                        "type": "string",
                        "default": "AT",
                        "nullable": true
                    },
                    "languageCode": {
                        "description": "The language code used for the product (ISO 639-1)",
                        "type": "string",
                        "default": "de",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "collection": {
                "title": "collection",
                "properties": {
                    "pagination": {
                        "$ref": "#/components/schemas/collectionPagination"
                    },
                    "data": {
                        "description": "",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "collectionPagination": {
                "title": "collectionPagination",
                "properties": {
                    "page": {
                        "description": "The page contained in this collection.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageSize": {
                        "description": "The page size used for reading the collection.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalCount": {
                        "description": "The total number of items in the collection.\\\nNote: This can be null depending on the used paginationMode.",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "country": {
                "description": "Data to represent a country, steve can ship to",
                "properties": {
                    "countryCode": {
                        "description": "Country code (ISO 3166-1 alpha-2)",
                        "type": "string"
                    },
                    "name": {
                        "description": "Country name",
                        "type": "string"
                    },
                    "phoneRequired": {
                        "description": "Specifies whether or not a phone number is required when using a shipping address in the country",
                        "type": "boolean"
                    },
                    "customsClearanceRequired": {
                        "description": "Specifies whether or not customs clearance is necessary",
                        "type": "boolean"
                    },
                    "provinces": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/countryProvinces"
                        },
                        "nullable": true
                    },
                    "currencyCode": {
                        "description": "The currency code which should be used for orders to the country (ISO 4217)",
                        "type": "string",
                        "example": "EUR"
                    }
                },
                "type": "object"
            },
            "countryCollection": {
                "title": "countryCollection",
                "description": "A collection of countries",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/country"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "countryProvinces": {
                "title": "countryProvinces",
                "properties": {
                    "provinceCode": {
                        "description": "The code of the province (ISO 3166-2)",
                        "type": "string",
                        "example": "IT-RM"
                    },
                    "name": {
                        "description": "The name of the province",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "delivery": {
                "description": "A delivery of the order",
                "properties": {
                    "number": {
                        "description": "The delivery number",
                        "type": "string"
                    },
                    "orderNumber": {
                        "description": "The order number. Note: This can be null if the delivery has no associated order.",
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "description": "Status of the delivery.\n- delivered: The delivery has been transferred to the delivery agent.",
                        "type": "string",
                        "enum": [
                            "delivered"
                        ]
                    },
                    "shipments": {
                        "description": "List of shipments (= package, parcel, pallet, ...)",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/deliveryShipment"
                        }
                    }
                },
                "type": "object"
            },
            "deliveryCollection": {
                "title": "deliveryCollection",
                "description": "A collection of deliveries",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/delivery"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "deliveryService": {
                "title": "deliveryService",
                "description": "Data to represent a delivery service",
                "properties": {
                    "code": {
                        "description": "Code of the delivery service",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the delivery service",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "deliveryServiceCollection": {
                "title": "deliveryServiceCollection",
                "description": "A collection of delivery services",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/deliveryService"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "deliveryShipment": {
                "title": "deliveryShipment",
                "description": "A shipments defines a single delivered entity (package, parcel, pallet, ...)",
                "properties": {
                    "number": {
                        "description": "The shipment number",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the delivery.\n- delivered: The delivery has been transferred to the delivery agent.",
                        "type": "string",
                        "enum": [
                            "delivered"
                        ]
                    },
                    "deliveryService": {
                        "description": "The delivery service used to send this delivery.\\\nThe codes of supported delivery services can be retrieved from the 'GET /delivery-service' endpoint.",
                        "type": "string",
                        "nullable": true
                    },
                    "code": {
                        "description": "Carrier specific tracking code",
                        "type": "string"
                    },
                    "link": {
                        "description": "Link to the carrier's specific tracking site",
                        "type": "string"
                    },
                    "weight": {
                        "type": "number",
                        "format": "float"
                    },
                    "weightUnit": {
                        "description": "Weight unit",
                        "type": "string"
                    },
                    "shipmentLines": {
                        "description": "Shipment lines",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/shipmentLine"
                        }
                    },
                    "externalShipmentId": {
                        "description": "External id of the shipment",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "journal": {
                        "description": "Journal entries regarding the shipment",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/deliveryShipmentJournal"
                        }
                    }
                },
                "type": "object"
            },
            "deliveryShipmentJournal": {
                "title": "deliveryShipmentJournal",
                "required": [
                    "date",
                    "typeCode"
                ],
                "properties": {
                    "date": {
                        "description": "The create date for the entry. Format in ISO 8601.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-04-24T12:27:00+02:00"
                    },
                    "typeCode": {
                        "description": "The type code of the journal entry.",
                        "type": "string",
                        "enum": [
                            "fulfillment_created",
                            "fulfillment_left-warehouse",
                            "fulfillment_delivered"
                        ]
                    }
                },
                "type": "object"
            },
            "error": {
                "required": [
                    "code",
                    "message"
                ],
                "properties": {
                    "code": {
                        "description": "Code",
                        "type": "string"
                    },
                    "message": {
                        "description": "Message",
                        "type": "string"
                    },
                    "references": {
                        "description": "References",
                        "type": "array",
                        "items": {
                            "properties": {
                                "key": {
                                    "description": "The key of the field causing the error",
                                    "type": "string"
                                },
                                "value": {
                                    "description": "The value of the field causing the error"
                                },
                                "fieldReference": {
                                    "description": "The exact reference to the field causing the error",
                                    "type": "string",
                                    "nullable": true
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "errorResponse": {
                "properties": {
                    "errors": {
                        "description": "errors",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/error"
                        }
                    }
                },
                "type": "object"
            },
            "getAuthPermissionCollectionResponse": {
                "title": "getAuthPermissionCollectionResponse",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/authPermissionResource"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "identifiers": {
                "description": "Contains key value pairs for single identifier",
                "type": "object",
                "additionalProperties": {}
            },
            "inboundDelivery": {
                "title": "inboundDelivery",
                "description": "Data to represent an inbound delivery",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/newInboundDelivery"
                    },
                    {
                        "properties": {
                            "inboundDeliveryNumber": {
                                "description": "The inbound delivery number.\\\nNote: If this number is prefixed with 'NICE', it means that the inbound delivery was \ncreated was created manually by niceshops.",
                                "type": "string",
                                "maxLength": 250,
                                "nullable": false
                            },
                            "inboundDeliveryNote": {
                                "description": "Notes from the steve warehouse team",
                                "type": "string",
                                "nullable": true
                            },
                            "shopWAWIDeliveryId": {
                                "description": "The API internal id of the inbound delivery",
                                "type": "integer",
                                "format": "int32"
                            },
                            "status": {
                                "description": "Status of the inbound delivery.\\\nThe status for not yet completed is subject to change. you may poll for changes.\n- open: The inbound delivery has not yet been delivered.\n- in_progress: The inbound delivery is being processed in our warehouse.\n- completed: The inbound delivery has been processed in our warehouse.\n- deleted: The inbound delivery has been deleted.",
                                "type": "string",
                                "enum": [
                                    "open",
                                    "in_progress",
                                    "completed",
                                    "deleted"
                                ]
                            },
                            "products": {
                                "description": "Products in the inbound delivery",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/inboundDeliveryProduct"
                                }
                            },
                            "shopCode": {
                                "description": "The shopCode used internally to distinguish between clients.",
                                "type": "string",
                                "maxLength": 40
                            },
                            "startDate": {
                                "description": "Start date of the delivery (timezone CET/CEST)",
                                "type": "string",
                                "format": "date",
                                "nullable": true
                            },
                            "endDate": {
                                "description": "End date of the delivery (timezone CET/CEST)",
                                "type": "string",
                                "format": "date",
                                "nullable": true
                            },
                            "deliverySlipNumber": {
                                "description": "Number of the inbound delivery on the delivery slip.\\\nIf the field is empty or not set in the database\n(e.g. the inbound delivery has not yet arrived in our warehouse), null will be returned.\\\nIf an empty string (\"\") is returned, it means that no delivery slip number is \navailable for the inbound delivery.",
                                "type": "string",
                                "nullable": true
                            },
                            "createDate": {
                                "description": "Creation date of the inbound delivery. Format in ISO 8601 (timezone CET/CEST)",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "inboundDeliveryCollection": {
                "title": "inboundDeliveryCollection",
                "description": "A collection of inbound deliveries",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/inboundDelivery"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "inboundDeliveryProduct": {
                "title": "inboundDeliveryProduct",
                "required": [
                    "productNumber",
                    "announcedCount"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/newInboundDeliveryProduct"
                    },
                    {
                        "properties": {
                            "productTitle": {
                                "description": "Title of the product",
                                "type": "string"
                            },
                            "deliveredCount": {
                                "description": "Number of actual delivered products in the inbound delivery",
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "information": {
                "required": [
                    "code",
                    "message"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/error"
                    }
                ]
            },
            "informationResponse": {
                "properties": {
                    "information": {
                        "description": "information",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/information"
                        }
                    }
                },
                "type": "object"
            },
            "manufacturer": {
                "title": "manufacturer",
                "description": "Data to represent a manufacturer",
                "allOf": [
                    {
                        "properties": {
                            "manufacturerNumber": {
                                "description": "Number of the manufacturer",
                                "type": "string"
                            },
                            "name": {
                                "description": "Manufacturer name",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "manufacturerCollection": {
                "title": "manufacturerCollection",
                "description": "A collection of manufacturers",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/manufacturer"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "newAuthRoleResource": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "newInboundDelivery": {
                "title": "newInboundDelivery",
                "description": "Data to create a new inbound delivery.",
                "required": [
                    "supplierNumber",
                    "expectedDeliveryDate",
                    "products"
                ],
                "properties": {
                    "inboundDeliveryName": {
                        "description": "Optional free-text reference for inbound delivery.",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "supplierNumber": {
                        "description": "Number of the supplier.\\\nAvailable suppliers can be retrieved from the 'GET /supplier' endpoint.",
                        "type": "string"
                    },
                    "expectedDeliveryDate": {
                        "description": "Expected date of the delivery (timezone CET/CEST)",
                        "type": "string",
                        "format": "date"
                    },
                    "products": {
                        "description": "Products in the inbound delivery",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/newInboundDeliveryProduct"
                        }
                    }
                },
                "type": "object"
            },
            "newInboundDeliveryProduct": {
                "title": "newInboundDeliveryProduct",
                "required": [
                    "productNumber",
                    "announcedCount"
                ],
                "properties": {
                    "productNumber": {
                        "description": "Number of the product",
                        "type": "string"
                    },
                    "announcedCount": {
                        "description": "Number of the announced products in the inbound delivery",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1
                    }
                },
                "type": "object"
            },
            "newOrder": {
                "title": "newOrder",
                "description": "Data to create a new order",
                "required": [
                    "customer",
                    "orderItems"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrder"
                    },
                    {
                        "properties": {
                            "orderItems": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/newOrderItem"
                                },
                                "maxItems": 1000
                            },
                            "customer": {
                                "$ref": "#/components/schemas/newOrderCustomer"
                            },
                            "options": {
                                "$ref": "#/components/schemas/newOrderOptions"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "newOrderCustomer": {
                "title": "newOrderCustomer",
                "required": [
                    "gender",
                    "languageCode",
                    "deliveryAddress"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrderCustomer"
                    },
                    {
                        "properties": {
                            "firstname": {
                                "description": "The customer's first name.\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.\\\nBecause of internal requirements, this field may be set with a fallback, if it is not provided.\\\nIf a lastname is provided, this field is required.",
                                "type": "string",
                                "maxLength": 40,
                                "nullable": true
                            },
                            "lastname": {
                                "description": "The customer's last name.\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.\\\nBecause of internal requirements, this field may be set with a fallback, if it is not provided.\\\nIf a lastname is provided, this field is required.",
                                "type": "string",
                                "maxLength": 40,
                                "nullable": true
                            },
                            "invoiceAddress": {
                                "description": "The customer's invoice address.\\\nNote: This field is required for invoicing and whether it is available or not depends on the used shopCode.\\\nUse the GET /shop endpoint to check if the meta.invoiceEnabled of the shop is set to true.\\\nBecause of internal requirements, fields of this array may be set with a fallback, if it is not provided.",
                                "nullable": true,
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/orderCustomerAddress"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "newOrderItem": {
                "title": "newOrderItem",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/orderItem"
                    },
                    {
                        "properties": {
                            "price": {
                                "$ref": "#/components/schemas/newOrderItemPrice"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "newOrderItemPrice": {
                "title": "newOrderItemPrice",
                "description": "The selling price of the item.\\\nNote: This field is required if the delivery address of the order requires customs clearance.",
                "nullable": true,
                "allOf": [
                    {
                        "$ref": "#/components/schemas/orderPrice"
                    },
                    {
                        "properties": {
                            "vat": {
                                "description": "The VAT in percent. (might be validated for country)",
                                "type": "number",
                                "format": "float",
                                "example": 20,
                                "nullable": false
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "newOrderOptions": {
                "title": "newOrderOptions",
                "description": "Additional optional options for a new order.",
                "nullable": true,
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrderOptions"
                    },
                    {
                        "properties": {
                            "autoProcessState": {
                                "description": "By setting this option, the order will be processed into the defined state.\\\nThis option is NOT available in the production systems.\\\nThe autoprocessing of the state happens after the order has been successfully created.\nIn case of any errors during the autoprocessing of the state, error messages are shown but the\norder will still have been created and will not be rolled back.\\\nAvailable states:\n- order_completed_single_delivery: The order is completely delivered within one delivery.\\\nNote that it might not be possible to create a single delivery for the whole order, for example\nbecause of weight restrictions. In those cases multiple deliveries will be created.\n- order_completed_multiple_deliveries: The order is completely delivered and includes\nseveral deliveries.\n- order_partially_delivered: The order is in progress and one of several deliveries is delivered.\n- order_canceled: The order is canceled.\n- order_locked: The order is locked.",
                                "type": "string",
                                "enum": [
                                    "order_completed_single_delivery",
                                    "order_partially_delivered",
                                    "order_completed_multiple_deliveries",
                                    "order_canceled",
                                    "order_locked"
                                ]
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "newProduct": {
                "title": "newProduct",
                "description": "Data to create a new product",
                "required": [
                    "productTitle",
                    "productTitleOriginal",
                    "articleShortDescription",
                    "articleLongDescription",
                    "variantGroup",
                    "taricCode",
                    "listPriceEUR",
                    "taxCode",
                    "manufacturerNumber",
                    "supplierNumber",
                    "languageCode"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseProduct"
                    },
                    {
                        "properties": {
                            "productType": {
                                "description": "Type of the product",
                                "type": "string",
                                "default": "standard",
                                "enum": [
                                    "standard",
                                    "sample",
                                    "sellable_sample",
                                    "tester",
                                    "packaging_material",
                                    "booking_seminar",
                                    "booking_appointment",
                                    "promo_material",
                                    "raw_material",
                                    "working_material",
                                    "service_principal",
                                    "service_ancillary",
                                    "inquiry_testdrive",
                                    "inquiry_raffle"
                                ]
                            },
                            "productStatus": {
                                "description": "Status of the product regarding sales.\\\nAvailable values:\n- enabled: Product is on sale (default)\n- enabled_external_only: Product is only available in external stores",
                                "type": "string",
                                "default": "enabled",
                                "enum": [
                                    "enabled",
                                    "enabled_external_only",
                                    null
                                ],
                                "nullable": true
                            },
                            "articleVariantType": {
                                "description": "The type of the article variant. \\\nThe articleVariantType 'standard_autotitle' is only allowed for the variantGroup 'content'",
                                "type": "string",
                                "default": "standard_autotitle",
                                "enum": [
                                    "standard",
                                    "standard_autotitle",
                                    "personalized"
                                ],
                                "nullable": true
                            },
                            "productTitle": {
                                "description": "Title of the Product",
                                "type": "string",
                                "maxLength": 255
                            },
                            "productTitleOriginal": {
                                "description": "Original title of the Product",
                                "type": "string",
                                "maxLength": 255
                            },
                            "articleShortDescription": {
                                "description": "Short description of the article",
                                "type": "string",
                                "maxLength": 255
                            },
                            "articleLongDescription": {
                                "description": "Long description of the article",
                                "type": "string",
                                "maxLength": 255
                            },
                            "taricCode": {
                                "description": "The TARIC code of the product",
                                "type": "string"
                            },
                            "listPriceEUR": {
                                "description": "The list price of the product in EUR",
                                "type": "number",
                                "format": "float"
                            },
                            "taxCode": {
                                "description": "One of the available tax codes.\n- std: Standard tax rate (AT 20%)\n- spc: 1st tax rate (AT 13%)\n- erm: 2nd tax rate (AT 10%)\n- erm3: 3rd tax rate (AT 5%)\n- nsp: not taxable (0%)",
                                "type": "string",
                                "default": "std",
                                "enum": [
                                    "std",
                                    "spc",
                                    "erm",
                                    "erm3",
                                    "nsb",
                                    null
                                ]
                            },
                            "manufacturerNumber": {
                                "description": "Number of the manufacturer",
                                "type": "string"
                            },
                            "supplierNumber": {
                                "description": "Number of the supplier.\\\nA list from available suppliers can be queried with the GET /supplier endpoint",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "newProductStockAdd": {
                "title": "newProductStockAdd",
                "description": "Data to add stock to a product",
                "properties": {
                    "quantity": {
                        "description": "Quantity (greater than zero) to be added to the stock.",
                        "type": "integer",
                        "minimum": 1
                    }
                },
                "type": "object"
            },
            "order": {
                "title": "order",
                "description": "Data to represent an order.",
                "required": [
                    "cancelable"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrder"
                    },
                    {
                        "properties": {
                            "orderNumber": {
                                "description": "The order number.\\\nNote: If this number is prefixed with 'NICE', it means that the order was created\nmanually by niceshops (see 'source')."
                            },
                            "orderItems": {
                                "description": "Note: canceled orderItems are NOT included.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/orderItem"
                                }
                            },
                            "customer": {
                                "$ref": "#/components/schemas/orderCustomer"
                            },
                            "status": {
                                "description": "The current status of the order.\n- new: The order was created but not every required information was given.\nThe order can not be processed without manual intervention.\n- processing: The order is being processed. For split deliveries, some of the shipments might have\nalready been transferred to the delivery agent.\n- delivered: The orders shipments have all been transferred to the delivery agent (Note that the\nupdate to this status might be delayed and not yet reflect the status of the linked deliveries).\n- deleted: The order has been marked as deleted.\n- canceled: The order has been canceled.\n- locked: The order is locked. The order can not be processed without manual intervention.\n- examination: The order has been manually locked. The order can not be processed without manual\nintervention.",
                                "type": "string",
                                "enum": [
                                    "new",
                                    "processing",
                                    "delivered",
                                    "deleted",
                                    "canceled",
                                    "locked",
                                    "examination"
                                ]
                            },
                            "orderDate": {
                                "description": "The create date for the order. Format in ISO 8601",
                                "type": "string",
                                "format": "date-time",
                                "example": "2020-04-24T12:27:00+02:00"
                            },
                            "delivery": {
                                "description": "Note that only deliveries with status 'delivered' are shown in this list.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/orderDelivery"
                                },
                                "nullable": true
                            },
                            "payment": {
                                "$ref": "#/components/schemas/orderPayment"
                            },
                            "shipping": {
                                "$ref": "#/components/schemas/orderShipping"
                            },
                            "source": {
                                "description": "The source of the order.\n- shopify: This order was created via the steve by niceshops Shopify application\n- nice: This order was created manually by niceshops\n- api: This order was created via the Fulfillment API",
                                "type": "string",
                                "enum": [
                                    "shopify",
                                    "nice",
                                    "api"
                                ]
                            },
                            "sourceLink": {
                                "description": "If available, a hyperlink to the application where this order was created is provided",
                                "type": "string",
                                "nullable": true
                            },
                            "cancelable": {
                                "description": "Indicates whether the order can be canceled or not",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderCollection": {
                "title": "orderCollection",
                "description": "A collection of shop orders",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderCustomer": {
                "title": "orderCustomer",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseOrderCustomer"
                    },
                    {
                        "properties": {
                            "number": {
                                "type": "string",
                                "nullable": true
                            },
                            "type": {
                                "description": "The customer's type",
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderCustomerAddress": {
                "title": "orderCustomerAddress",
                "required": [
                    "street",
                    "streetNumber",
                    "zipCode",
                    "city",
                    "countryCode"
                ],
                "properties": {
                    "street": {
                        "type": "string",
                        "maxLength": 35
                    },
                    "streetNumber": {
                        "description": "Note: Must not contain more than 5 letters",
                        "type": "string",
                        "maxLength": 15
                    },
                    "zipCode": {
                        "type": "string"
                    },
                    "district": {
                        "type": "string",
                        "maxLength": 35,
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "provinceCode": {
                        "description": "Mandatory if province codes for country (GET /country) exist\n(ISO 3166-2) - https://www.iso.org/iso-3166-country-codes.html",
                        "type": "string",
                        "nullable": true
                    },
                    "countryCode": {
                        "description": "Country code (ISO 3166-1 alpha-2)",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "orderCustomerDeliveryAddress": {
                "title": "orderCustomerDeliveryAddress",
                "required": [
                    "nameLine1"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/orderCustomerAddress"
                    },
                    {
                        "properties": {
                            "nameLine1": {
                                "type": "string",
                                "maxLength": 150
                            },
                            "nameLine2": {
                                "type": "string",
                                "maxLength": 150,
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderDelivery": {
                "title": "orderDelivery",
                "description": "The delivery for the order. Details can be read by GET /delivery/.",
                "properties": {
                    "number": {
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the delivery.\n- delivered: The delivery has been transferred to the delivery agent.",
                        "type": "string",
                        "enum": [
                            "delivered"
                        ]
                    }
                },
                "type": "object"
            },
            "orderDeliveryCosts": {
                "title": "orderDeliveryCosts",
                "description": "The delivery costs of the order, which will be charged to the customer.\\\nNote: This field is required if customs clearance is necessary for the delivery address of the order.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/orderPrice"
                    },
                    {
                        "properties": {
                            "title": {
                                "type": "string",
                                "maxLength": 255,
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderItem": {
                "title": "orderItem",
                "required": [
                    "productNumber",
                    "count"
                ],
                "properties": {
                    "productNumber": {
                        "description": "Valid product number",
                        "type": "string"
                    },
                    "title": {
                        "description": "Item Title (optional)",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "count": {
                        "description": "Positive number of items to order",
                        "type": "integer",
                        "format": "int32"
                    },
                    "externalProductNumber": {
                        "description": "Product number of the customer",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "price": {
                        "$ref": "#/components/schemas/orderItemPrice"
                    },
                    "options": {
                        "description": "Additional options (optional, TBD)",
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "orderItemPrice": {
                "title": "orderItemPrice",
                "description": "The selling price of the item.\\\nNote: This field is required if the delivery address of the order requires customs clearance.",
                "nullable": true,
                "allOf": [
                    {
                        "$ref": "#/components/schemas/orderPrice"
                    },
                    {
                        "properties": {
                            "vat": {
                                "description": "The VAT in percent. Can be null in case of bundle products with mixedVAT percentages. (might be validated for country)",
                                "type": "number",
                                "format": "float",
                                "example": 20,
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "orderPayment": {
                "title": "orderPayment",
                "description": "Options regarding the payment of the order",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The payment method",
                        "type": "string",
                        "enum": [
                            "invoice"
                        ]
                    }
                },
                "type": "object"
            },
            "orderPrice": {
                "title": "orderPrice",
                "required": [
                    "value",
                    "type",
                    "vat",
                    "currencyCode"
                ],
                "properties": {
                    "value": {
                        "description": "The price value rounded to 2 decimals with a dot used as separator. Note: This price value refers to\na single unit and is not an aggregated price value, which may be calculated by multiplying this price\nvalue by the corresponding item count.",
                        "type": "number",
                        "format": "float",
                        "example": 10.99
                    },
                    "type": {
                        "description": "The price type",
                        "type": "string",
                        "enum": [
                            "net",
                            "gross"
                        ],
                        "example": "gross"
                    },
                    "vat": {
                        "description": "The VAT in percent (might be validated for country)",
                        "type": "number",
                        "format": "float",
                        "example": 20
                    },
                    "currencyCode": {
                        "description": "The currency code (ISO 4217)",
                        "type": "string",
                        "example": "EUR"
                    }
                },
                "type": "object"
            },
            "orderShipping": {
                "title": "orderShipping",
                "description": "Options regarding the shipping of the order.",
                "required": [
                    "deliveryService"
                ],
                "properties": {
                    "deliveryService": {
                        "description": "The delivery service to recommend for usage.\\\nThe codes of supported delivery services can be retrieved from the 'GET /delivery-service' endpoint.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "product": {
                "title": "product",
                "description": "Data to represent a product",
                "required": [
                    "productNumber",
                    "shopCode",
                    "source"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/baseProduct"
                    },
                    {
                        "properties": {
                            "productNumber": {
                                "type": "string"
                            },
                            "shopCode": {
                                "description": "The shop to which the product belongs",
                                "type": "string"
                            },
                            "productStatus": {
                                "description": "Status of the product regarding sales.\\\nAvailable values:\n- enabled: Product is on sale\n- enabled_external_only: Product is only available in external stores\n- deleted: Product is deleted\n- discontinued: Product is discontinued\n- expired: Product is expired\n- incorrect: Product was incorrectly created\n- internal: Product is available for internal sales only\n- preparation: Product is in preparation for sale\\\n\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "enum": [
                                    "enabled",
                                    "enabled_external_only",
                                    null,
                                    "deleted",
                                    "discontinued",
                                    "expired",
                                    "incorrect",
                                    "internal",
                                    "preparation"
                                ],
                                "nullable": true
                            },
                            "productTitle": {
                                "description": "Title of the Product\\\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "maxLength": 255,
                                "nullable": true
                            },
                            "productTitleOriginal": {
                                "description": "Original title of the Product\\\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "maxLength": 255,
                                "nullable": true
                            },
                            "articleShortDescription": {
                                "description": "Short description of the article\\\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "maxLength": 255,
                                "nullable": true
                            },
                            "articleLongDescription": {
                                "description": "Long description of the article\\\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "maxLength": 255,
                                "nullable": true
                            },
                            "taricCode": {
                                "description": "The TARIC Code of the product\\\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "nullable": true
                            },
                            "listPriceEUR": {
                                "description": "The list price of the product in EUR.\\\nNote: This can be null if the product was not created via the API.",
                                "type": "number",
                                "format": "float",
                                "nullable": true
                            },
                            "taxCode": {
                                "description": "One of the available tax codes.\n- std: Standard tax rate (AT 20%)\n- spc: 1st tax rate (AT 13%)\n- erm: 2nd tax rate (AT 10%)\n- erm3: 3rd tax rate (AT 5%)\n- nsp: not taxable (0%)\\\n\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "default": "std",
                                "enum": [
                                    "std",
                                    "spc",
                                    "erm",
                                    "erm3",
                                    "nsb",
                                    null
                                ],
                                "nullable": true
                            },
                            "manufacturerNumber": {
                                "description": "Number of the manufacturer\\\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "nullable": true
                            },
                            "supplierNumber": {
                                "description": "Number of the supplier.\\\nNote: This can be null if the product was not created via the API.",
                                "type": "string",
                                "nullable": true
                            },
                            "source": {
                                "description": "The source of the product.\n- self: Own product\n- nice: Product of another supplier\n- bundle: Product that is composed of individual positions",
                                "type": "string",
                                "enum": [
                                    "self",
                                    "nice",
                                    "bundle"
                                ]
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "productCollection": {
                "title": "productCollection",
                "description": "A collection of products",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/product"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "productJournal": {
                "title": "productJournal",
                "properties": {
                    "journalId": {
                        "description": "The API internal id of the journal entry.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "date": {
                        "description": "The date and time at which the journal entry was created. Format in ISO 8601.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-04-24T12:27:00+02:00"
                    },
                    "productNumber": {
                        "description": "The number of the product which the journal entry refers to.",
                        "type": "string"
                    },
                    "reason": {
                        "description": "The code that defines the reason for the stock change.",
                        "type": "string",
                        "enum": [
                            "expired",
                            "damaged",
                            "own_withdrawal",
                            "correction",
                            "niceshops_order",
                            "inbound",
                            "fulfillment",
                            "return"
                        ]
                    },
                    "stockDelta": {
                        "description": "The change of the stock.\\\nNote: This might not be set for all reasons.",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "stockOld": {
                        "description": "The old value of the stock before applying the delta.\\\nNote: This might not be set for all reasons.",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "stockNew": {
                        "description": "The new value of the stock when the journal entry was created.\\\nNote: This might not be set for all reasons.",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "reference": {
                        "$ref": "#/components/schemas/productJournalReference"
                    }
                },
                "type": "object"
            },
            "productJournalCollection": {
                "title": "productJournalCollection",
                "description": "A collection of product journals",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/productJournal"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "productJournalReference": {
                "title": "productJournalReference",
                "properties": {
                    "companyName": {
                        "description": "Company name. Is provided if Journal entry reason is 'niceshops_order' and a company is set.",
                        "type": "string",
                        "nullable": true
                    },
                    "inboundDeliveryNumber": {
                        "description": "Inbound delivery number. Is provided if Journal entry reason is 'inbound'.",
                        "type": "string",
                        "nullable": true
                    },
                    "orderNumber": {
                        "description": "Order number. Is provided if Journal entry reason is 'fulfillment' or 'return'.",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "productPurchasePrice": {
                "title": "productPurchasePrice",
                "required": [
                    "currencyCode",
                    "amount",
                    "pricePerUnit"
                ],
                "properties": {
                    "currencyCode": {
                        "description": "The currency code (ISO 4217)",
                        "type": "string",
                        "example": "EUR"
                    },
                    "amount": {
                        "description": "Amount of purchased products",
                        "type": "integer",
                        "format": "int32"
                    },
                    "pricePerUnit": {
                        "description": "The price per product unit",
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "productUnit": {
                "title": "productUnit",
                "description": "Data to represent a productUnit",
                "required": [
                    "code"
                ],
                "properties": {
                    "code": {
                        "description": "Code of the product unit",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "productUnitCollection": {
                "title": "productUnitCollection",
                "description": "A collection of product units",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/productUnit"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "reconsignment": {
                "title": "reconsignment",
                "description": "A reconsignment",
                "properties": {
                    "reconsignmentNumber": {
                        "description": "The number the reconsignment is referred by.",
                        "type": "string"
                    },
                    "reconsignmentDate": {
                        "description": "The date the reconsignment was created.",
                        "type": "string"
                    },
                    "reconsignmentReason": {
                        "description": "The reason for the reconsignment.",
                        "type": "string",
                        "enum": [
                            "reconsignment_other_default",
                            "reconsignment_other_unknown",
                            "reconsignment_product_damage",
                            "reconsignment_product_defect",
                            "reconsignment_product_dislike",
                            "reconsignment_product_guarantee",
                            "reconsignment_product_missing",
                            "reconsignment_product_outofdate",
                            "reconsignment_product_wrong",
                            "reconsignment_transport_damage",
                            "reconsignment_transport_invalidaddress",
                            "reconsignment_transport_lost",
                            "reconsignment_transport_nopickup",
                            "reconsignment_transport_rejected"
                        ]
                    },
                    "orderNumber": {
                        "description": "The order number. Note: This can be null if the order was not created via the API.",
                        "type": "string"
                    },
                    "orderDeliveryServiceCode": {
                        "description": "The delivery service used for the creation of the order.",
                        "type": "string"
                    },
                    "reconsignmentDeliveryServiceCode": {
                        "description": "The delivery service used for the reconsignment.",
                        "type": "string"
                    },
                    "reconsignmentWasPreAnnounced": {
                        "description": "Indicates whether the reconsignment was pre-announced or not.",
                        "type": "boolean"
                    },
                    "reconsignmentCountryCode": {
                        "description": "The country, from where the reconsignment was shipped (ISO 3166-1 alpha-2).",
                        "type": "string"
                    },
                    "reconsignmentLines": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/reconsignmentLine"
                        }
                    }
                },
                "type": "object"
            },
            "reconsignmentCollection": {
                "title": "reconsignmentCollection",
                "description": "A collection of reconsignments",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "Class ReconsignmentResourceCollection",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/reconsignment"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "reconsignmentLine": {
                "title": "reconsignmentLine",
                "description": "One piece of content in a reconsignment.",
                "properties": {
                    "productNumber": {
                        "description": "",
                        "type": "string"
                    },
                    "putBackToStockCount": {
                        "description": "Number of items which have been put back to stock.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "description": "Number of items included in the reconsignment.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "unit": {
                        "description": "Product unit",
                        "type": "string"
                    },
                    "productWeight": {
                        "description": "Weight of a single product",
                        "type": "number",
                        "format": "float"
                    },
                    "productWeightUnit": {
                        "description": "Product weight unit",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "reconsignmentLineCollection": {
                "title": "reconsignmentLineCollection",
                "description": "A collection of reconsignment lines",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "Class ReconsignmentLineResourceCollection",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/reconsignmentLine"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "reportClearingOrder": {
                "description": "An order for clearing",
                "properties": {
                    "orderNumber": {
                        "description": "The order number. Note: This can be null if the order was not created via the API.",
                        "type": "string"
                    },
                    "shopOrderId": {
                        "description": "The API internal id of the order.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "deliveryZipCode": {
                        "description": "",
                        "type": "string"
                    },
                    "deliveryCountryCode": {
                        "description": "",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "reportClearingOrderCollection": {
                "title": "reportClearingOrderCollection",
                "description": "A collection of orders for clearing",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/reportClearingOrder"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "reportInventoryMovement": {
                "description": "Inventory Movement",
                "properties": {
                    "productNumber": {
                        "description": "Number of the product",
                        "type": "string"
                    },
                    "stockStart": {
                        "description": "Stock at the start of the period",
                        "type": "integer"
                    },
                    "stockEnd": {
                        "description": "Stock at the end of the period",
                        "type": "integer"
                    },
                    "stockAdded": {
                        "description": "Stock added in the period",
                        "type": "integer"
                    },
                    "stockSubtracted": {
                        "description": "Stock subtracted in the period",
                        "type": "integer"
                    },
                    "stockCorrected": {
                        "description": "Stock corrections in the period",
                        "type": "integer"
                    },
                    "stockUsedForOwnPurposes": {
                        "description": "Stock used for internal purposes in the period",
                        "type": "integer"
                    },
                    "stockReturned": {
                        "description": "Stock returned in the period",
                        "type": "integer"
                    },
                    "movementEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/reportInventoryMovementEntry"
                        }
                    }
                },
                "type": "object"
            },
            "reportInventoryMovementEntry": {
                "description": "Inventory movement entry",
                "properties": {
                    "typeCode": {
                        "description": "The type code of the movement entry",
                        "type": "string",
                        "enum": [
                            "added",
                            "subtracted",
                            "corrected",
                            "forOwnPurpose",
                            "returned"
                        ]
                    },
                    "stock": {
                        "description": "The amount of moved stock",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "reportInventoryMovementEntryCollection": {
                "title": "Inventory movement entry collection",
                "description": "A collection of inventory movement entries",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "Data of the collection",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/reportInventoryMovement"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "shipmentLine": {
                "title": "shipmentLine",
                "description": "One piece of content in a shipment",
                "properties": {
                    "productNumber": {
                        "description": "Product number",
                        "type": "string"
                    },
                    "count": {
                        "description": "Number of items contained in the delivery",
                        "type": "number",
                        "format": "int32"
                    },
                    "unit": {
                        "description": "Product unit",
                        "type": "string",
                        "nullable": true
                    },
                    "serialNumbers": {
                        "description": "Serial numbers",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "shop": {
                "description": "Data to represent a shop",
                "properties": {
                    "id": {
                        "description": "Id",
                        "type": "string"
                    },
                    "shopCode": {
                        "description": "The shopCode used internally to distinguish between clients",
                        "type": "string"
                    },
                    "internalReferencePrefix": {
                        "description": "The prefix to the references internally to distinguish between clients.",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email used internally.",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The id of the project to which the shop belongs.",
                        "type": "string"
                    },
                    "meta": {
                        "description": "Meta data of the shop.",
                        "properties": {
                            "shopifyShopDomain": {
                                "description": "Domain of the Shopify shop.",
                                "type": "string",
                                "nullable": true
                            },
                            "testShop": {
                                "description": "Flag to mark a shop used for testing.",
                                "type": "boolean",
                                "default": false,
                                "nullable": true
                            },
                            "testShopResetNotBefore": {
                                "description": "Date time to indicate that the test shop will not be reset before this time.",
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            },
                            "sandboxMode": {
                                "description": "Flag to mark a shop in sandbox mode.",
                                "type": "boolean",
                                "default": false,
                                "nullable": true
                            },
                            "addTestSuffixToInternalReference": {
                                "description": "Flag to mark if a test suffix should be added to internal references.",
                                "type": "boolean",
                                "default": false,
                                "nullable": true
                            },
                            "shopifyMultiShop": {
                                "description": "Flag to mark the shop as part of a Shopify installation that uses multiple shops.",
                                "type": "boolean",
                                "default": false,
                                "nullable": true
                            },
                            "shopifyDefaultShop": {
                                "description": "Flag to mark the shop as the default shop for a Shopify installation that uses multiple shops.\\\nThe default shop is used for e.g. fetching stock levels.",
                                "type": "boolean",
                                "default": true,
                                "nullable": true
                            },
                            "shopifyOrderCountryCode": {
                                "description": "The order country code (ISO 3166-1 alpha-2) to identify which shop to use in a Shopify\ninstallation that uses multiple shops.\\\nIf a Shopify order matches this country code, it will be assigned to this shop.",
                                "type": "string",
                                "nullable": true
                            },
                            "invoiceEnabled": {
                                "description": "Flag to indicate whether firstname, lastname, and invoiceAddress fields are available for order\ncustomers or not.",
                                "type": "boolean",
                                "default": false,
                                "nullable": true
                            },
                            "defaultCurrency": {
                                "description": "Overwrite currency of shopify orders.",
                                "type": "string",
                                "enum": [
                                    "GBP",
                                    "SEK",
                                    "PLN",
                                    null
                                ],
                                "nullable": true
                            },
                            "shopifyOverwriteCustomerEmailEnabled": {
                                "description": "Flag to mark if it is allowed to set a customer's email in shopify. If false the shop email will be used as default.",
                                "type": "boolean",
                                "nullable": true
                            }
                        },
                        "type": "object",
                        "nullable": true,
                        "additionalProperties": true
                    }
                },
                "type": "object"
            },
            "shopCollection": {
                "title": "shopCollection",
                "description": "A collection of shops",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/shop"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "stock": {
                "description": "Stock of a product",
                "properties": {
                    "productNumber": {
                        "description": "Product number",
                        "type": "string"
                    },
                    "stocked": {
                        "description": "Amount stocked in the warehouse\n- the reserved amount for ongoing orders is NOT subtracted",
                        "type": "integer"
                    },
                    "reserved": {
                        "description": "Amount reserved for ongoing orders",
                        "type": "integer"
                    },
                    "available": {
                        "description": "Amount available for orders\n- the reserved amount for ongoing orders is subtracted\\\n- if the overbookingPossibilityStatus is 'only_inbound_deliveries', the incoming amount is added",
                        "type": "integer"
                    },
                    "incoming": {
                        "description": "Amount of ongoing inbound deliveries",
                        "type": "integer"
                    },
                    "overbookingPossibilityStatus": {
                        "description": "Status regarding the possibility of overbooking\n- possible: Overbooking is possible\n- not_possible: Overbooking is not possible\n- only_inbound_deliveries: Overbooking is only possible for the amount in ongoing inbound deliveries",
                        "type": "string",
                        "enum": [
                            "possible",
                            "not_possible",
                            "only_inbound_deliveries"
                        ]
                    }
                },
                "type": "object"
            },
            "stockCollection": {
                "title": "stockCollection",
                "description": "A collection of stocks",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/stock"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "supplier": {
                "title": "supplier",
                "description": "Data to represent a supplier",
                "required": [
                    "supplierNumber",
                    "name"
                ],
                "properties": {
                    "supplierNumber": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "Supplier name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "supplierCollection": {
                "title": "supplierCollection",
                "description": "A collection of suppliers",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/collection"
                    },
                    {
                        "properties": {
                            "data": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/supplier"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "updateDeliveryShipment": {
                "title": "updateDeliveryShipment",
                "description": "Fields to update a shipment",
                "required": [
                    "externalShipmentId"
                ],
                "properties": {
                    "externalShipmentId": {
                        "description": "External id of the shipment",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "updateShop": {
                "description": "Fields to update a shop",
                "properties": {
                    "meta": {
                        "description": "Meta data of the shop.",
                        "properties": {
                            "shopifyShopDomain": {
                                "description": "Domain of the Shopify shop.",
                                "type": "string",
                                "nullable": true
                            },
                            "testShopResetNotBefore": {
                                "description": "Date time to indicate that the test shop will not be reset before this time.",
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            },
                            "sandboxMode": {
                                "description": "Flag to mark a shop in sandbox mode.",
                                "type": "boolean",
                                "default": false,
                                "nullable": true
                            },
                            "addTestSuffixToInternalReference": {
                                "description": "Flag to mark if a test suffix should be added to internal references.",
                                "type": "boolean",
                                "default": false,
                                "nullable": true
                            },
                            "defaultCurrency": {
                                "description": "Overwrite currency of shopify orders.",
                                "type": "string",
                                "enum": [
                                    "GBP",
                                    "SEK",
                                    "PLN",
                                    null
                                ],
                                "nullable": true
                            },
                            "shopifyOverwriteCustomerEmailEnabled": {
                                "description": "Flag to mark if it is allowed to set a customer's email in shopify. If false the shop email will be used as default.",
                                "type": "boolean",
                                "nullable": true
                            }
                        },
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "variantGroupEnum": {
                "title": "variantGroupEnum",
                "type": "string",
                "enum": [
                    "color",
                    "size",
                    "content",
                    "einzelvariante",
                    "standard_title"
                ]
            }
        },
        "securitySchemes": {
            "oAuthAuthorization": {
                "type": "oauth2",
                "description": "OAuth2 Authorization",
                "flows": {
                    "clientCredentials": {
                        "tokenUrl": "https://authentication-api.conqore.niceshops.com/oauth/token",
                        "refreshUrl": "UNDEFINED",
                        "scopes": {}
                    }
                }
            },
            "bearerAuth": {
                "type": "http",
                "description": "Bearer Token Authorization",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    }
}